[{"path":[]},{"path":"https://docs.ropensci.org/rerddap/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. CORRECT: edit roxygen comment .R file R/. INCORRECT: edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/rerddap/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/rerddap/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://docs.ropensci.org/rerddap/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note rerddadp project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/CONTRIBUTING.html","id":"discussion-forum","dir":"","previous_headings":"","what":"Discussion forum","title":"CONTRIBUTING","text":"Check discussion forum think issue requires longer form discussion.","code":""},{"path":"https://docs.ropensci.org/rerddap/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/rerddap/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Scott Chamberlain Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using rerddap to Access Data from ERDDAP Servers","text":"rerddap general purpose R client working ERDDAP servers. ERDDAP web service developed Bob Simons NOAA. time writing, sixty ERDDAP servers (though public facing) providing access literally petabytes data model output relevant oceanography, meteorology, fisheries marine mammals, among areas. ERDDAP simple use, RESTful web service, allows data subsetted returned variety formats. vignette goes nuts bolts using rerddap package, shows power combination rerddap package ERDDAP servers. examples taken xtractomatic package (available CRAN - https://cran.r-project.org/package=xtractomatic), rerddapXtracto package available Github (https://github.com/rmendels/rerddapXtracto), reworked use rerddap directly. examples new vignette, include gridded non-gridded datasets several ERDDAPs.","code":""},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Using rerddap to Access Data from ERDDAP Servers","text":"first step install rerddap package, stable version available CRAN: development version can installed GitHub: load library: Besides rerddap following libraries used vignette: Code chunks always given required libraries chunks standalone nature. Many plots use early version cmocean colormaps designed Kristen Thyng (see https://matplotlib.org/cmocean/ https://github.com/matplotlib/cmocean) translatd original Python implementation. However, now cmocean package R. past scripts may use built-color palette maintained , use cmocean package advisable kept --date. present version cmocean package names changed, “temperature” now “thermal”, “chlorophyll” now “algae”, “salinity” now “haline”.","code":"install.packages(\"rerddap\") remotes::install_github(\"ropensci/rerddap\") library(\"rerddap\") library(\"akima\") library(\"dplyr\") library(\"ggplot2\") library(\"mapdata\") library(\"ncdf4\") library(\"plot3D\")"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"the-main-rerddap-functions","dir":"Articles","previous_headings":"","what":"The main rerddap functions","title":"Using rerddap to Access Data from ERDDAP Servers","text":"complete list rerddap functions can seen looking rerddap package help: selecting index package. main functions used : list servers rerddap knows - server() search ERDDAP server terms - ed_search(query, page = NULL, page_size = NULL, = \"griddap\", url = eurl(), ...) search list ERDDAP servers terms - global_search(query, server_list, which_service) get list datasets ERDDAP server - ed_datasets(= \"tabledap\", url = eurl()) obtain information dataset - info(datasetid, url = eurl(), ...) extract data griddap dataset - griddap(x, ..., fields = \"\", stride = 1, fmt = \"nc\", url = eurl(), store = disk(), read = TRUE, callopts = list()) extract data tabledap dataset - tabledap(x, ..., fields = NULL, distinct = FALSE, orderby = NULL, orderbymax = NULL, orderbymin = NULL, orderbyminmax = NULL, units = NULL, url = eurl(), store = disk(), callopts = list()) careful using functions ed_search(), ed_datasets() global_search(). default ERDDAP 9,000 datasets, grids, list gridded datasets can quite long. seemly reasonable search: returns 1000 responses. focused query: still returns 172 responses. simple search doesn’t narrow things enough, look advanced search function ed_search_adv().","code":"?rerddap whichSST <- ed_search(query = \"SST\") whichSST <- ed_search(query = \"SST MODIS\")"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"finding-the-data-you-want","dir":"Articles","previous_headings":"","what":"Finding the Data You Want","title":"Using rerddap to Access Data from ERDDAP Servers","text":"first way find dataset browse builtin web page particular ERDDAP server. list public available ERDDAP servers can obtained rerddap command: list ERDDAP servers based list maintained Awesome ERDDAP site compiled Irish Marine Institute. second way find obtain desired data use functions rerddap. basic steps : Find dataset ERDDAP server (rerddap::servers(), rerddap::ed_search(), rerddap::ed_datasets() ). Get needed information dataset (rerddap::info() ) Think going . Make request data (rerddap::griddap() rerddap::tabledap() ). discuss steps detail, look realistic uses package.","code":"servers() #> # A tibble: 62 × 4 #>    name                                                  short_name url   public #>    <chr>                                                 <chr>      <chr> <lgl>  #>  1 Voice of the Ocean                                    VOTO       http… TRUE   #>  2 St. Lawrence Global Observatory - CIOOS | Observatoi… SLGO-OGSL  http… TRUE   #>  3 CoastWatch West Coast Node                            CSWC       http… TRUE   #>  4 ERDDAP at the Asia-Pacific Data-Research Center       APDRC      http… TRUE   #>  5 NOAA's National Centers for Environmental Informatio… NCEI       http… TRUE   #>  6 Biological and Chemical Oceanography Data Management… BCODMO     http… TRUE   #>  7 European Marine Observation and Data Network (EMODne… EMODnet    http… TRUE   #>  8 European Marine Observation and Data Network (EMODne… EMODnet P… http… TRUE   #>  9 Marine Institute - Ireland                            MII        http… TRUE   #> 10 CoastWatch Caribbean/Gulf of Mexico Node              CSCGOM     http… TRUE   #> # ℹ 52 more rows"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"think-about-what-you-are-going-to-do-","dir":"Articles","previous_headings":"Finding the Data You Want","what":"Think about what you are going to do.","title":"Using rerddap to Access Data from ERDDAP Servers","text":"may seem strange step process, important many datasets high-resolution, data requests can get large, quickly. example, based real use case. MUR SST ( Multi-scale Ultra-high Resolution (MUR) SST Analysis fv04.1, see https://coastwatch.pfeg.noaa.gov/erddap/griddap/jplMURSST41.html ) daily, high-quality, high-resolution sea surface temperature product. user wanted MUR data 2x2-degree box, daily year. seems innocuous enough. Except MURsst one-hundreth degree resolution. assume just binary representation data, assuming 8-bytes per value, math: Yes, 116,800,000 bytes roughly 115MB request. Morever user wanted data .csv file, usually makes resulting file 8-10 times larger, now 1GB request. Even , four parameters dataset, rerddap::griddap() “fields” specified, fields downloaded, therefore resulting files four times large given . gist think request make . little mental math get rough estimate size download. times receiving data .csv file convenient, make certain request large. larger requests, obtain data netCDF files. default, rerddap::griddap() “melts”” data dataframe, .csv provides small convenience. really large downloads, select option rerddap::griddap() read data, use instead netcdf4 package read data, allows reading parts data time. provide brief tutorial reading data using ncdf4 package.","code":"100*100*4*8*365 #> [1] 116800000"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"some-erddap-basics","dir":"Articles","previous_headings":"","what":"Some ERDDAP Basics","title":"Using rerddap to Access Data from ERDDAP Servers","text":"One main advantages service ERDDAP need download subset data desire, rather entire dataset, convenient essential large datasets. underlying data model ERDDAP quite simple - everything either (multi-dimensional) grid (think R array) table (think simple spreadsheet data table). Grids subsetted using function griddap() tables subset using function tabledap(). know datasetID data , unsure grid table, several ways find . look two datasets, ‘jplMURSST41’ ‘siocalcofiHydroCasts’. first method use rerddap function browse() brings information datasets browser, first case “data” link “griddap”, second “tabledap”. method use rerddap function info: Notice information ‘jplMURSST41’ lists dimensions (grid) ‘siocalcofiHydroCasts’ (table).","code":"browse('jplMURSST41') browse('siocalcofiHydroCast') info('jplMURSST41') info('siocalcofiHydroCast')"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"subsetting-griddap","dir":"Articles","previous_headings":"Some ERDDAP Basics","what":"Subsetting griddap()","title":"Using rerddap to Access Data from ERDDAP Servers","text":"Like R array, ERDDAP grids subsetted setting limits dimension variables, difference subset defined coordinate space (latitude values, longitude values, time values) rather array space done R arrays. Thus ‘jplMURSST41’ desired area data extract latitude limits (22N, 51N), longitude limits (140W, 105W), time limits (2017-01-01, 2017-01-02) following passed function griddap(): full griddap() request retrieve “analysed_sst” constraints :","code":"latitude = c(22., 51.) longitude = c(-140., -105) time = c(\"2017-01-01\", \"2017-01-02\") sstInfo <- info('jplMURSST41') murSST <- griddap(sstInfo, latitude = c(22., 51.), longitude = c(-140., -105), time = c(\"2017-01-01\", \"2017-01-02\"), fields = 'analysed_sst')"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"strides","dir":"Articles","previous_headings":"Some ERDDAP Basics > Subsetting griddap()","what":"Strides","title":"Using rerddap to Access Data from ERDDAP Servers","text":"Strides allow retrieve data within coordinate bound every “n” values, “n” integer - think “” part R function seq(). useful say monthly dataset December values desired, want subsample high resolution dataset. default stride 1 dimensions. want change stride value dimension, value must given dimensions. previous example, every fifth longitude desired, call : Strides done array space, coordinate space - skipping say number degrees longitude, skipping number values array index - longitude thought array, every fifth value used. many cases strides work coordinate space handy, can cause lot problems. Consider case neither starting longitude, ending longitude request lie actual data grid, stride coordinate units way value requested actually lies actual grid value. equivalent complicated problem data regridding data interpolation. ERDDAP receives request bounds actual dataset grid, ERDDAP finds closest values grid requested bounds, returns points grid points . stride added value greater one resricted array space, guarantees every value returned lies dataset grid.","code":"murSST <- griddap(sstInfo, latitude = c(22., 51.), longitude = c(-140., -105), time = c(\"2017-01-01\", \"2017-01-02\"), stride = c(1,1,5), fields = 'analysed_sst')"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"subsetting-tabledap","dir":"Articles","previous_headings":"Some ERDDAP Basics","what":"Subsetting tabledap()","title":"Using rerddap to Access Data from ERDDAP Servers","text":"Tables ERDDAP subset using “constraint expressions” variable table. valid operators =, != (equals), =~ (regular expression test), <, <=, >, >=. constraint constructed parameter left, value right, operator middle, within set quotes. example, SWFSC/FRD trawl catch data (datasetID ‘FRDCPSTrawlLHHaulCatch’), sardines 2010 desired, following constraints set tabledap() call: Note tabledap() character strings usually must passed “double-quoted”, seen example scientific name. full tabledap() request retrieve ‘latitude’, ‘longitude’, ‘time’, ‘scientific_name’, ‘subsample_count’ constraints :","code":"'time>=2010-01-01' 'time<=2010-12-31' 'scientific_name=\"Sardinops sagax\"' CPSinfo <- info('FRDCPSTrawlLHHaulCatch') sardines <- tabledap(CPSinfo, fields = c('latitude',  'longitude', 'time', 'scientific_name', 'subsample_count'), 'time>=2010-01-01', 'time<=2010-12-31', 'scientific_name=\"Sardinops sagax\"' )"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"searching","dir":"Articles","previous_headings":"","what":"Searching","title":"Using rerddap to Access Data from ERDDAP Servers","text":"functions rerddap work ERDDAP server long base URL provided. list advertised ERDDAP servers provided Irish Marine Institute’s Awesome ERDDAP web page, rerddap function servers() download list. Given base ERDDAP URL, function ed_search() search server given search terms. default ERDDAP server https://upwell.pfeg.noaa.gov/erddap/. Alternately, function global_search() search list ERDDAP servers given search terms. function ed_datasets() lists datasets available given ERDDAP server.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"mur-sst","dir":"Articles","previous_headings":"griddap","what":"MUR SST","title":"Using rerddap to Access Data from ERDDAP Servers","text":"MUR (Multi-scale Ultra-high Resolution) analyzed SST product 0.01-degree resolution going back 2002, providing one longest satellite based time series high resolution (see https://podaac.jpl.nasa.gov/dataset/MUR-JPL-L4-GLOB-v4.1). latest data available region west coast can extracted plotted :","code":"require(\"ggplot2\") require(\"mapdata\") require(\"rerddap\") sstInfo <- info('jplMURSST41') # get latest daily sst murSST <- griddap(sstInfo, latitude = c(22., 51.), longitude = c(-140., -105), time = c('last','last'), fields = 'analysed_sst') mycolor <- colors$temperature w <- map_data(\"worldHires\", ylim = c(22., 51.), xlim = c(-140, -105)) ggplot(data = murSST$data, aes(x = longitude, y = latitude, fill = analysed_sst)) +     geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +     geom_raster(interpolate = FALSE) +     scale_fill_gradientn(colours = mycolor, na.value = NA) +     theme_bw() + ylab(\"latitude\") + xlab(\"longitude\") +     coord_fixed(1.3, xlim = c(-140, -105),  ylim = c(22., 51.)) + ggtitle(\"Latest MUR SST\")"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"viirs-sst-and-chlorophyll","dir":"Articles","previous_headings":"griddap","what":"VIIRS SST and Chlorophyll","title":"Using rerddap to Access Data from ERDDAP Servers","text":"VIIRS (Visible Infrared Imaging Radiometer Suite) scanning radiometer, collects visible infrared imagery radiometric measurements land, atmosphere, cryosphere, oceans. VIIRS data used measure cloud aerosol properties, ocean color, sea land surface temperature, ice motion temperature, fires, Earth’s albedo. NASA NOAA provide VIIRS-based high resolution SST chlorophyll products. ERD provides 3-day composite SST product 750 meter resolution developed real-time NOAA product. recent values can obtained setting “time” “last”. (Note R sees latitude-longitude grid slightly uneven (even though fact even), produces artificial lines ggplot2::geom_raster(). order remove lines, latitude-longitude grid remapped evenly-space grid.)  time series dataset given location, (36., -126.):  similar 3-day composite chloropyll region scientific quality product developed NOAA:","code":"require(\"ggplot2\") require(\"mapdata\") require(\"rerddap\") sstInfo <- info('erdVHsstaWS3day') # get latest 3-day composite sst viirsSST <- griddap(sstInfo, latitude = c(41., 31.), longitude = c(-128., -115), time = c('last','last'), fields = 'sst') # remap latitiudes and longitudes to even grid myLats <- unique(viirsSST$data$latitude) myLons <- unique(viirsSST$data$longitude) myLats <- seq(range(myLats)[1], range(myLats)[2], length.out = length(myLats)) myLons <- seq(range(myLons)[1], range(myLons)[2], length.out = length(myLons)) # melt these out to full grid mapFrame <- expand.grid(x = myLons, y = myLats) mapFrame$y <- rev(mapFrame$y) # form a frame with the new values and the data tempFrame <- data.frame(sst = viirsSST$data$sst, lat = mapFrame$y, lon = mapFrame$x) mycolor <- colors$temperature w <- map_data(\"worldHires\", ylim = c(30., 42.), xlim = c(-128, -114)) ggplot(data = tempFrame, aes(x = lon, y = lat, fill = sst)) +     geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +     geom_raster(interpolate = FALSE) +     scale_fill_gradientn(colours = mycolor, na.value = NA) +     theme_bw() + ylab(\"latitude\") + xlab(\"longitude\") +     coord_fixed(1.3, xlim = c(-128, -114),  ylim = c(30., 42.)) + ggtitle(\"Latest VIIRS 3-day SST\") require(\"ggplot2\") require(\"rerddap\") viirsSST1 <- griddap(sstInfo, latitude = c(36., 36.),                       longitude = c(-126., -126.),                       time = c('2015-01-01','2015-12-31'), fields = 'sst') tempTime <- as.Date(viirsSST1$data$time, origin = '1970-01-01', tz = \"GMT\") tempFrame <- data.frame(time = tempTime, sst = viirsSST1$data$sst) ggplot(tempFrame, aes(time, sst)) +    geom_line() +    theme_bw() +    ylab(\"sst\") +   ggtitle(\"VIIRS SST at (36N, 126W)\") require(\"ggplot2\") require(\"mapdata\") require(\"rerddap\") chlaInfo <- info('erdVHNchla3day') viirsCHLA <- griddap(chlaInfo, latitude = c(41., 31.),                       longitude = c(-128., -115), time = c('last','last'),                       fields = 'chla') mycolor <- colors$chlorophyll w <- map_data(\"worldHires\", ylim = c(30., 42.), xlim = c(-128, -114)) ggplot(data = viirsCHLA$data, aes(x = longitude, y = latitude, fill = log(chla))) +   geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +   geom_raster(interpolate = FALSE) +   scale_fill_gradientn(colours = mycolor, na.value = NA) +   theme_bw() + ylab(\"latitude\") + xlab(\"longitude\") +   coord_fixed(1.3, xlim = c(-128, -114),  ylim = c(30., 42.)) +    ggtitle(\"Latest VIIRS 3-day Chla\")"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"temperature-at-70m-in-the-north-pacific-from-the-soda-model-output","dir":"Articles","previous_headings":"griddap","what":"Temperature at 70m in the north Pacific from the SODA model output","title":"Using rerddap to Access Data from ERDDAP Servers","text":"example extract 4-D dataset (results “Simple Ocean Data Assimilation (SODA)” model - see https://www2.atmos.umd.edu/~ocean/), illustrate case z-coordinate default name “altitude”. Water temperature 70m depth extracted North Pacific Ocean. Since data cross dateline, necessary use new “world2Hires” continental outlines package mapdata Pacific Ocean centered. Unfortunatley small problem outlines certain countries wrap mistakenly appear plots, countries must removed, see code .","code":"require(\"rerddap\") dataInfo <- rerddap::info('hawaii_d90f_20ee_c4cb') xpos <- c(135.25, 240.25) ypos <- c(20.25, 60.25) zpos <- c(70.02, 70.02) tpos <- c('2010-12-15', '2010-12-15') soda70 <- griddap(dataInfo,  longitude = xpos, latitude = ypos,                    time = tpos, depth = zpos, fields = 'temp' ) require(\"ggplot2\") require(\"mapdata\") xlim <- c(135, 240) ylim <- c(20, 60) my.col <- colors$temperature ## Must do a kludge to remove countries that wrap and mess up the plot w1 <- map(\"world2Hires\", xlim = c(135, 240), ylim = c(20, 60), fill = TRUE, plot = FALSE) remove <- c(\"UK:Great Britain\", \"France\", \"Spain\", \"Algeria\", \"Mali\", \"Burkina Faso\", \"Ghana\", \"Togo\") w <- map_data(\"world2Hires\", regions = w1$names[!(w1$names %in% remove)], ylim = ylim, xlim = xlim) myplot <- ggplot() +     geom_raster(data = soda70$data, aes(x = longitude, y = latitude, fill = temp), interpolate = FALSE) +     geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +     theme_bw() + scale_fill_gradientn(colours = my.col, na.value = NA, limits = c(-3,30), name = \"temperature\") +     ylab(\"latitude\") + xlab(\"longitude\") +     coord_fixed(1.3, xlim = xlim, ylim = ylim) +     ggtitle(paste(\"70m temperature \", soda70$data$time[1])) myplot"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"hourly","dir":"Articles","previous_headings":"griddap","what":"Irish Marine Institute","title":"Using rerddap to Access Data from ERDDAP Servers","text":"Irish Marine Institute ERDDAP server https://erddap.marine.ie/erddap. Among datasets, hourly output model North Altantic ocean, variety ocean related parameters, see dataset IMI_NEATL. obtain latest sea surface salinity domain model: extracted data plotted:","code":"require(\"rerddap\") urlBase <- \"https://erddap.marine.ie/erddap/\" parameter <- \"sea_surface_salinity\" sssTimes <- c(\"last\", \"last\") sssLats <- c(48.00625, 57.50625) sssLons <- c(-17.99375, -1.00625) dataInfo <- rerddap::info(\"IMI_NEATL\", url = urlBase) NAtlSSS <- griddap(dataInfo, longitude = sssLons, latitude = sssLats, time = sssTimes, fields = parameter, url = urlBase) require(\"ggplot2\") require(\"mapdata\") xlim <- c(-17.99375, -1.00625) ylim <- c(48.00625, 57.50625) my.col <- colors$salinity w <- map_data(\"worldHires\", ylim = ylim, xlim = xlim) myplot <- ggplot() +     geom_raster(data = NAtlSSS$data, aes(x = longitude, y = latitude, fill = sea_surface_salinity), interpolate = FALSE) +     geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +     theme_bw() + scale_fill_gradientn(colours = my.col, na.value = NA, limits = c(34, 36), name = \"salinity\") +     ylab(\"latitude\") + xlab(\"longitude\") +     coord_fixed(1.3, xlim = xlim, ylim = ylim) +     ggtitle(paste(\"salinity\", NAtlSSS$data$time[1])) myplot"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"ifremer","dir":"Articles","previous_headings":"griddap","what":"IFREMER","title":"Using rerddap to Access Data from ERDDAP Servers","text":"French agency IFREMER also ERDDAP server. salinity data 75 meters “Global Ocean, Coriolis Observation Re-Analysis CORA4.1” model west coast United States extracted plotted. ggplot2 function geom_raster() designed unevenly spaced coordinates, latitudes model. function interp() package akima used interpolate data plotted.","code":"require(\"rerddap\") urlBase <- \"https://www.ifremer.fr/erddap/\" parameter <- \"PSAL\" ifrTimes <- c(\"2019-05-15\", \"2019-05-15\") ifrLats <- c(30., 50.) ifrLons <- c(-140., -110.) ifrDepth <- c(75., 75.) dataInfo <- rerddap::info(\"CORIOLIS_GLOBAL_NRTOA_OBS_TIME_SERIE_PSAL\", url = urlBase) ifrPSAL <- griddap(dataInfo, longitude = ifrLons, latitude = ifrLats, time = ifrTimes, depth = ifrDepth,  fields = parameter, url = urlBase) ## ggplot2 has trouble with unequal y's  require(\"akima\")  require(\"dplyr\")  require(\"ggplot2\")  require(\"mapdata\")   xlim <- c(-140, -110)   ylim <- c(30, 51) ## ggplot2 has trouble with unequal y's   my.col <- colors$salinity   tempData1 <- ifrPSAL$data$PSAL   tempData <- array(tempData1 , 61 * 54)   tempFrame <- data.frame(x = ifrPSAL$data$longitude, y = ifrPSAL$data$latitude)   tempFrame$temp <- tempData   tempFrame1 <- dplyr::filter(tempFrame, !is.nan(temp))   myinterp <- akima::interp(tempFrame1$x, tempFrame1$y, tempFrame1$temp, xo = seq(min(tempFrame1$x), max(tempFrame1$x), length = 61), yo = seq(min(tempFrame1$y), max(tempFrame1$y), length = 54))   myinterp1 <- expand.grid(x = myinterp$x, y = myinterp$y)   myinterp1$temp <- array(myinterp$z, 61 * 54)   w <- map_data(\"worldHires\", ylim = ylim, xlim = xlim)  myplot <- ggplot() +     geom_raster(data = myinterp1, aes(x = x, y = y, fill = temp), interpolate = FALSE) +     geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +     theme_bw() + scale_fill_gradientn(colours = my.col, na.value = NA, limits = c(32, 35), name = \"salinity\") +     ylab(\"latitude\") + xlab(\"longitude\") +     coord_fixed(1.3, xlim = xlim, ylim = ylim) + ggtitle(paste(\"salinity at 75 meters\",ifrPSAL$data$time[1] ))  myplot"},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"calcofi-data","dir":"Articles","previous_headings":"tabledap","what":"CalCOFI data","title":"Using rerddap to Access Data from ERDDAP Servers","text":"CalCOFI (California Cooperative Oceanic Fisheries Investigations - https://calcofi.org) multi-agency partnership formed 1949 investigate collapse sardine population California. organization’s members NOAA Fisheries Service, Scripps Institution Oceanography, California Department Fish Wildlife. scope research evolved study marine ecosystems California management fisheries resources. nearly complete CalCOFI data, physical biological, available ERDDAP. following example modification script developed Dr. Andrew Leising Southwest Fisheries Science Center. original script used automate generation several yearly reports California Current Ecosystem. script gets chlorophyll data measure primary productivity hydrocasts,calculates seasoanlly adjusted chlorophyll anomaly well seasonally adjusted primary productivity anomaly. first step get information particular dataset: get desired data 1984 2014: “intchl” “intC14” returned character strings, easier work numbers: point requested data R workspace - rest code performs calculations derive seasonally adjusted values plot .","code":"require(\"rerddap\") hydroInfo <- info('siocalcofiHydroCast') require(\"rerddap\") calcofi.df <- tabledap(hydroInfo, fields = c('cst_cnt',  'date', 'year', 'month', 'julian_date', 'julian_day', 'rpt_line', 'rpt_sta', 'cruz_num', 'intchl', 'intc14', 'time'), 'time>=1984-01-01T00:00:00Z', 'time<=2014-04-17T05:35:00Z') if (packageVersion('rerddap') < '1.1.0'){     calcofi.df$cruz_num <- as.numeric(calcofi.df$cruz_num)     calcofi.df$intc14 <- as.numeric(calcofi.df$intc14)     calcofi.df$time <- as.Date(calcofi.df$time, origin = '1970-01-01', tz = \"GMT\") } require(\"dplyr\")  # calculate cruise means by_cruznum <- group_by(calcofi.df, cruz_num) tempData <- select(by_cruznum, year, month, cruz_num, intchl, intc14) CruiseMeans <- summarize(by_cruznum, cruisechl = mean(intchl, na.rm = TRUE), cruisepp = mean(intc14, na.rm = TRUE), year = median(year, na.rm = TRUE), month = median(month, na.rm = TRUE)) tempTimes <- paste0(CruiseMeans$year,'-',CruiseMeans$month,'-1') cruisetimes <- as.Date(tempTimes, origin = '1970-01-01', tz = \"GMT\") CruiseMeans$cruisetimes <- cruisetimes # calculate monthly \"climatologies\" byMonth <- group_by(CruiseMeans, month) climate <- summarize(byMonth, ppClimate = mean(cruisepp, na.rm = TRUE), chlaClimate = mean(cruisechl, na.rm = TRUE)) # calculate anomalies CruiseMeans$chlanom <- CruiseMeans$cruisechl - climate$chlaClimate[CruiseMeans$month] CruiseMeans$ppanom <- CruiseMeans$cruisepp - climate$ppClimate[CruiseMeans$month] # calculate mean yearly anomaly byYear <- select(CruiseMeans, year) tempData <- select(CruiseMeans, year, chlanom, ppanom ) byYear <- group_by(tempData, year) yearlyAnom <- summarize(byYear, ppYrAnom = mean(ppanom, na.rm = TRUE), chlYrAnom = mean(chlanom, na.rm = TRUE)) yearlyAnom$year <- ISOdate(yearlyAnom$year, 01, 01, hour = 0) ggplot(yearlyAnom, aes(year, chlYrAnom)) + geom_line() +   theme_bw() + ggtitle('yearly chla anom') ggplot(yearlyAnom, aes(year, ppYrAnom)) + geom_line() +   theme_bw() + ggtitle('yearly pp anom')"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"cps-trawl-surveys","dir":"Articles","previous_headings":"tabledap","what":"CPS Trawl Surveys","title":"Using rerddap to Access Data from ERDDAP Servers","text":"CPS (Coastal Pelagic Species) Trawl Life History Length Frequency Data contains length distribution subset individuals species (mainly non-target) caught SWFSC-FRD fishery independent trawl surveys coastal pelagic species. Measured lengths indicated length type (fork, standard, total, mantle) grouped 10 mm bins (identified midpoint length class) counts recorded sex. number location sardines (Sardinops sagax) tows March 2010 2011 extracted, compared monthly SST satellites. First, query ERDDAP server see CPS Trawl data available ERDDAP server, , obtain datasetID dataset. get information CPS dataset: extract desired CPS data: plot data versus monthly SST values:  Also interest distribution sardines years:","code":"require(\"rerddap\") CPSquery <- ed_search(query = 'CPS Trawl') CPSquery$alldata[[1]]$summary CPSquery$alldata[[1]]$tabledap CPSquery$alldata[[1]]$dataset_id require(\"rerddap\") CPSinfo <- info('FRDCPSTrawlLHHaulCatch') require(\"dplyr\") require(\"rerddap\") sardines <- tabledap(CPSinfo, fields = c('latitude',  'longitude', 'time', 'scientific_name', 'subsample_count'), 'time>=2010-01-01', 'time<=2012-01-01', 'scientific_name=\"Sardinops sagax\"' ) if (packageVersion('rerddap') < '1.1.0'){     sardines$time <- as.Date(sardines$time, origin = '1970-01-01', tz = \"GMT\")     sardines$latitude <- as.numeric(sardines$latitude)     sardines$longitude <- as.numeric(sardines$longitude) } sardines$time <- as.Date(sardines$time, origin = '1970-01-01', tz = \"GMT\") sardines$latitude <- as.numeric(sardines$latitude) sardines$longitude <- as.numeric(sardines$longitude) sardine2010 <- filter(sardines, time < as.Date('2010-12-01')) # get the dataset info sstInfo <- info('erdMWsstdmday') # get 201004 monthly sst sst201004 <- griddap('erdMWsstdmday', latitude = c(22., 51.), longitude = c(220., 255), time = c('2010-04-16','2010-04-16'), fields = 'sst') # get 201104 monthly sst sst201104 <- griddap('erdMWsstdmday', latitude = c(22., 51.), longitude = c(220., 255), time = c('2011-04-16','2011-04-16'), fields = 'sst') # get polygons of coast for this area w <- map_data(\"worldHires\", ylim = c(22., 51.), xlim = c(220 - 360, 250 - 360)) # plot 201004 sst on the map sardine2010 <- filter(sardines, time < as.Date('2010-12-01', origin = '1970-01-01', tz = \"GMT\")) sardine2011 <- filter(sardines, time > as.Date('2010-12-01', origin = '1970-01-01', tz = \"GMT\")) mycolor <- colors$temperature p1 <- ggplot() +   geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +   geom_raster(data = sst201004$data, aes(x = (longitude - 360), y = latitude, fill = sst), interpolate = FALSE) +   scale_fill_gradientn(colours = mycolor, na.value = NA, limits = c(5,30)) +   theme_bw() + ylab(\"latitude\") + xlab(\"longitude\") +   coord_fixed(1.3, xlim = c(220 - 360, 250 - 360),  ylim = c(22., 51.))  # plot 201104 sst on the map p2 <- ggplot() +   geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +   geom_raster(data = sst201104$data, aes(x = (longitude - 360), y = latitude, fill = sst), interpolate = FALSE) +   geom_point(data = sardine2011, aes(x = longitude, y = latitude, colour = subsample_count)) +   scale_fill_gradientn(colours = mycolor, na.value = NA, limits = c(5,30)) +   theme_bw() + ylab(\"latitude\") + xlab(\"longitude\") +   coord_fixed(1.3, xlim = c(220 - 360, 250 - 360),  ylim = c(22., 51.)) p1 + geom_point(data = sardine2010, aes(x = longitude, y = latitude, colour = subsample_count)) + scale_colour_gradient(space = \"Lab\", na.value = NA, limits = c(0,80))  p2 +   geom_point(data = sardine2011, aes(x = longitude, y = latitude, colour = subsample_count)) + scale_colour_gradient(space = \"Lab\", na.value = NA, limits = c(0,80)) sardinops <- tabledap(CPSinfo, fields = c('longitude', 'latitude', 'time'),  'scientific_name=\"Sardinops sagax\"') if (packageVersion('rerddap') < '1.1.0') {     sardinops$time <- as.Date(sardinops$time, origin = '1970-01-01', tz = \"GMT\")     sardinops$year <- as.factor(format(sardinops$time, '%Y'))     sardinops$latitude <- as.numeric(sardinops$latitude)     sardinops$longitude <- as.numeric(sardinops$longitude) } sardinops$year <- as.factor(format(sardinops$time, '%Y')) xlim <- c(-135, -110) ylim <- c(30, 51) coast <- map_data(\"worldHires\", ylim = ylim, xlim = xlim) ggplot() +     geom_point(data = sardinops, aes(x = longitude, y = latitude, colour = year)) +     geom_polygon(data = coast, aes(x = long, y = lat, group = group), fill = \"grey80\") +     theme_bw() + ylab(\"latitude\") + xlab(\"longitude\") +     coord_fixed(1.3, xlim = xlim, ylim = ylim) +     ggtitle(\"Location of sardines by year in EPM Trawls\")"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"ndbc-buoys","dir":"Articles","previous_headings":"tabledap","what":"NDBC Buoys","title":"Using rerddap to Access Data from ERDDAP Servers","text":"NOAA’s National Data Buoy Center (NDBC) collects world-wide data buoys ocean. ERDDAP can searched location buoys bounding box latitudes(37N, 47N) longitudes (124W, 121W) results plotted:  Looking wind speed 2012 station “46012”","code":"# get location and station ID of NDBC buoys in a region BuoysInfo <- info('cwwcNDBCMet') locationBuoys <- tabledap(BuoysInfo, distinct = TRUE, fields = c(\"station\", \"longitude\", \"latitude\"), \"longitude>=-124\", \"longitude<=-121\", \"latitude>=37\", \"latitude<=47\") if (packageVersion('rerddap') < '1.1.0') {    locationBuoys$latitude <- as.numeric(locationBuoys$latitude)    locationBuoys$longitude <- as.numeric(locationBuoys$longitude) } xlim <- c(-130, -110) ylim <- c(35, 50) coast <- map_data(\"worldHires\", ylim = ylim, xlim = xlim) ggplot() +    geom_point(data = locationBuoys, aes(x = longitude , y = latitude, colour = factor(station) )) +    geom_polygon(data = coast, aes(x = long, y = lat, group = group), fill = \"grey80\") +    theme_bw() + ylab(\"latitude\") + xlab(\"longitude\") +    coord_fixed(1.3, xlim = xlim, ylim = ylim) +    ggtitle(\"Location of buoys in given region\") buoyData <- tabledap(BuoysInfo, fields = c(\"time\", \"wspd\"), 'station=\"46012\"', 'time>=2012-01-01', 'time<=2013-01-01') if (packageVersion('rerddap') < '1.1.0') {     buoyData$wspd <- as.numeric(buoyData$wspd)     buoyData$time <- as.Date(buoyData$time, origin = '1970-01-01', tz = \"GMT\") } ggplot(buoyData, aes(time, wspd)) +    geom_line() +    theme_bw() +    ylab(\"wind speed\") +   ggtitle(\"Wind Speed in 2012 from buoy 46012 \")"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"ioos-glider-data","dir":"Articles","previous_headings":"tabledap","what":"IOOS Glider Data","title":"Using rerddap to Access Data from ERDDAP Servers","text":"mission IOOS Glider DAC provide glider operators simple process submitting glider data sets centralized location, enabling data visualized, analyzed, widely distributed via existing web services Global Telecommunications System (GTS) archived National Centers Environmental Information (NCEI). IOOS Glider Dac accessible rerddap (https://gliders.ioos.us/erddap/index.html). Extracting plotting salinity part path one glider deployed Scripps Institution Oceanography:","code":"urlBase <- \"https://data.ioos.us/gliders/erddap/\" gliderInfo <- info(\"sp064-20161214T1913\",  url = urlBase) glider <- tabledap(gliderInfo, fields = c(\"longitude\", \"latitude\", \"depth\", \"salinity\"), 'time>=2016-12-14', 'time<=2016-12-23', url = urlBase) if (packageVersion('rerddap') < '1.1.0') {     glider$longitude <- as.numeric(glider$longitude)     glider$latitude <- as.numeric(glider$latitude)     glider$depth <- as.numeric(glider$depth) } require(\"plot3D\") scatter3D(x = glider$longitude , y = glider$latitude , z = -glider$depth, colvar = glider$salinity,              col = colors$salinity, phi = 40, theta = 25, bty = \"g\", type = \"p\",            ticktype = \"detailed\", pch = 10, clim = c(33.2,34.31), clab = 'Salinity',            xlab = \"longitude\", ylab = \"latitude\", zlab = \"depth\",            cex = c(0.5, 1, 1.5))"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"animal-telemetry-network-atn","dir":"Articles","previous_headings":"","what":"Animal Telemetry Network (ATN)","title":"Using rerddap to Access Data from ERDDAP Servers","text":"Integrated Ocean Observing System Animal Telemetry Network (IOOS ATN) designed serve access point search, discover access animal telemetry data, associated oceanographic datasets, wide variety species platforms. track one tagged animals extracted, plotted SST value satellite along track.","code":"atnURL <- 'https://oceanview.pfeg.noaa.gov/erddap/' atnInfo <- info('gtoppAT', url = atnURL) atnData <- tabledap(atnInfo, fields = c(\"time\", \"longitude\", \"latitude\"), 'toppID=\"1807001\"', url = atnURL) atnData$latitude <- as.numeric(atnData$latitude) atnData$longitude <- as.numeric(atnData$longitude) ncdcSST = array(NA_real_, dim = length(atnData$time)) ncdcSSTInfo = info('ncdcOisst2Agg') time_bound <- c(as.character(atnData$time[i]), as.character(atnData$time[i])) for (i in 1:length(atnData$time)) {   extract <- griddap(ncdcSSTInfo,                       fields = 'sst',                       latitude = c(atnData$latitude[i], atnData$latitude[i]),                       longitude = c(atnData$longitude[i], atnData$longitude[i]),                       time = time_bound                      ) ncdcSST[i] <- extract$data$sst } ylim <- c(32.5, 34) xlim <- c(-119, -116.5) mycolor <- colors$temperature w <- map_data(\"worldHires\", ylim = ylim, xlim = xlim) alldata <- data.frame(sst = ncdcSST, longitude = atnData$longitude - 360, latitude = atnData$latitude) z <- ggplot(alldata, aes(x = longitude, y = latitude)) +    geom_point(aes(colour = sst), size = .5) z + geom_polygon(data = w, aes(x = long, y = lat, group = group), fill = \"grey80\") +   theme_bw() +   scale_colour_gradientn(colours = mycolor, limits = c(16.9, 17.3), \"SST\") +   coord_fixed(1.3, xlim = xlim, ylim = ylim) + ggtitle(\"SST Along Track\")"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"california-current-system-integrated-ecosystem-assessment-ccsiea","dir":"Articles","previous_headings":"","what":"California Current System Integrated Ecosystem Assessment (CCSIEA)","title":"Using rerddap to Access Data from ERDDAP Servers","text":"primary goals CCIEA better understand web interactions drive patterns trends components within California Current ecosystem, forecast changing environmental conditions management actions affect status components. conceptual model social-ecological system California Current illustrates humans social systems inextricably linked marine, coastal, upland environments (see (“www.integratedecosystemassessment.noaa.gov/regions/california-current/projects”). 300 indices developed CCSIEA available rerddap. index coho abundance California compared February value index strength location North Pacific High, developed “North Pacific High wintertime pre-conditioning California current productivity” Schroeder et al. (Geophys. Res. Lett., 40, 541–546).","code":"urlBase <- 'https://coastwatch.pfeg.noaa.gov/erddap/' nphInfo <- info('erdNph', url = urlBase) nphData <- tabledap(nphInfo, fields = c(\"year\", \"maxSLP\" ), 'month=2', 'year>=1987', url = urlBase) nphData$maxSLP <- as.numeric(nphData$maxSLP) urlBase <- 'https://oceanview.pfeg.noaa.gov/erddap/' cohoInfo <- info('cciea_SM_CA_CO_ABND', url = urlBase) cohoData <- tabledap(cohoInfo, fields = c(\"abundance_anomaly\", \"time\"),  url = urlBase) if (packageVersion('rerddap') < '1.1.0') {     cohoData$abundance_anomaly <- as.numeric(cohoData$abundance_anomaly) } alldata <- data.frame(coho = cohoData$abundance_anomaly[1:27], maxSLP = nphData$maxSLP, year = nphData$year) ggplot(alldata) + geom_line(aes(x = year, y = coho), colour = 'blue') + theme_bw() + ggtitle(\"coho abundance anomaly\") ggplot(alldata) + geom_line(aes(x = year, y = maxSLP), colour = 'red') + theme_bw() + ggtitle(\"MaxSLP\")"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"cacheing-last-now-idempotency-and-a-gotcha","dir":"Articles","previous_headings":"","what":"Cacheing, “last”, “now”, idempotency, and a gotcha","title":"Using rerddap to Access Data from ERDDAP Servers","text":"rerddap default caches requests make, happen make request , data restored cache, rather go retrieve remotely. applications, boon (“knitting” “reknitting” document), can speed things lot request script, works cases ERDDAP request “idempotent”. means request always return thing matter requests came - doesn’t depend state. However true script uses either “last” griddap() “now” tabledap() return different values time elapses data added datasets. desirable ERDDAP purely idempotent, “last” “now” constructs helpful people using ERDDAP dashboards, webpages, regular input models like, benefits far outweigh problems. However, using either “last” “now” rerddap based script, want careful clear rerddap cache, otherwise request viewed , data last request, rather latest data, returned. Note several examples vignette use “last”, therefore graphics may look different depending “knitted” vignette. help dealing cache, see:","code":"?cache_delete ?cache_delete_all ?cache_details ?cache_list"},{"path":"https://docs.ropensci.org/rerddap/articles/Using_rerddap.html","id":"ncdf4","dir":"Articles","previous_headings":"","what":"Reading data from a netCDF file.","title":"Using rerddap to Access Data from ERDDAP Servers","text":"give brief summary read part data netCDF file. basic steps : Open netCDF file Map coordinate values array indices Extract data sample netCDF file, “MWsstd1day.nc” included. small file toy example, basic principles remain larger file. Open netCDF file: possible obtain coordinate values extracting file, ncdf4 default automatically nc_open. names coordinate dimensions can found : (note coordinate names given ‘C’ order, extract coordinates opposite, “Fortran” order) values coordinate, say longitude, can found : names variables netCDF file can found : extract done giving pointer netCDF file (“sstFile” instance), name variable ot extracted (“sst” instance), starting index value (array coordinates) dimension, count (number index values) include. values particular dimension wanted, “-1” can used count. example extract values first day: Suppose want latitudes (30.0, 30.5) longitudes (210.0, 210.5) first day. need find array indices match coordinate values: extract data: wanted time series (30N, 210E) : example, easy visually peruse dimension values large extract might possible. Suppose wanted values latitude range (30.1, 30.3) since range values interested might grid boundary want smallest range include values (grid smallest value may less 30.1) similarly longitude, say (210.1, 210.3): perform extract :","code":"require(\"ncdf4\") #> Loading required package: ncdf4 exampleFile <- system.file(\"extdata\", \"MWsstd1day.nc\", package = \"rerddap\") sstFile <- nc_open(exampleFile) names(sstFile$dim) #> [1] \"time\"      \"altitude\"  \"latitude\"  \"longitude\" sstFile$dim$longitude$vals #>  [1] 210.0000 210.0125 210.0250 210.0375 210.0500 210.0625 210.0750 210.0875 #>  [9] 210.1000 210.1125 210.1250 210.1375 210.1500 210.1625 210.1750 210.1875 #> [17] 210.2000 210.2125 210.2250 210.2375 210.2500 210.2625 210.2750 210.2875 #> [25] 210.3000 210.3125 210.3250 210.3375 210.3500 210.3625 210.3750 210.3875 #> [33] 210.4000 210.4125 210.4250 210.4375 210.4500 210.4625 210.4750 210.4875 #> [41] 210.5000 210.5125 210.5250 210.5375 210.5500 210.5625 210.5750 210.5875 #> [49] 210.6000 210.6125 210.6250 210.6375 210.6500 210.6625 210.6750 210.6875 #> [57] 210.7000 210.7125 210.7250 210.7375 210.7500 210.7625 210.7750 210.7875 #> [65] 210.8000 210.8125 210.8250 210.8375 210.8500 210.8625 210.8750 210.8875 #> [73] 210.9000 210.9125 210.9250 210.9375 210.9500 210.9625 210.9750 210.9875 #> [81] 211.0000 names(sstFile$var) #> [1] \"sst\" require(\"ncdf4\") day1SST <- ncvar_get(sstFile, \"sst\", start = c(1, 1, 1, 1), count = c(1, 1, -1, -1)) latMin <- which(sstFile$dim$latitude$vals == 30.0) latMax <- which(sstFile$dim$latitude$vals == 30.5) lonMin <- which(sstFile$dim$longitude$vals == 210.0) lonMax <- which(sstFile$dim$longitude$vals == 210.5) require(\"ncdf4\") day1SST <- ncvar_get(sstFile, \"sst\", start = c(lonMin, latMin, 1, 1), count = c( (lonMax - lonMin + 1), (latMax - latMin + 1), 1, 1 )) require(\"ncdf4\") day1SST <- ncvar_get(sstFile, \"sst\", start = c(lonMax, latMin, 1, 1), count = c(1, 1, 1, -1 )) latMin <- max(which(sstFile$dim$latitude$vals <= 30.1)) latMax <- min(which(sstFile$dim$latitude$vals >= 30.3)) lonMin <- max(which(sstFile$dim$longitude$vals <= 210.1)) lonMax <- min(which(sstFile$dim$longitude$vals >= 210.3)) require(\"ncdf4\") day1SST <- ncvar_get(sstFile, \"sst\", start = c(lonMin, latMin, 1, 1), count = c( (lonMax - lonMin + 1), (latMax - latMin + 1), 1, 1 ))"},{"path":"https://docs.ropensci.org/rerddap/articles/rerddap.html","id":"netcdf","dir":"Articles","previous_headings":"","what":"NetCDF","title":"rerddap introduction","text":"rerddap supports NetCDF format, default using griddap() function. NetCDF binary file format, much smaller footprint disk csv. binary file format means ’s harder inspect, ncdf4 package makes easy pull data write data back NetCDF file. Note file extension NetCDF files .nc. Whether choose NetCDF csv small files won’t make much difference, large files.","code":""},{"path":"https://docs.ropensci.org/rerddap/articles/rerddap.html","id":"caching","dir":"Articles","previous_headings":"","what":"Caching","title":"rerddap introduction","text":"Data files downloaded cached single hidden directory ~/.rerddap machine. ’s hidden don’t accidentally delete data, can still easily delete data like. use griddap() tabledap() functions, construct MD5 hash base URL, query parameters - way query separately cached. hash, look ~/.rerddap matching hash. ’s match use file disk - match, make http request data ERDDAP server specify.","code":""},{"path":"https://docs.ropensci.org/rerddap/articles/rerddap.html","id":"erddap-servers","dir":"Articles","previous_headings":"","what":"ERDDAP servers","title":"rerddap introduction","text":"can get data.frame ERDDAP servers using function servers(). list ERDDAP servers drawn Awesome ERDDAP page maintained Irish Marine Institute . know ERDDAP servers, follow instructions page add server.","code":""},{"path":"https://docs.ropensci.org/rerddap/articles/rerddap.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"rerddap introduction","text":"Stable version CRAN , development version GitHub","code":"install.packages(\"rerddap\") remotes::install_github(\"ropensci/rerddap\") library(\"rerddap\")"},{"path":"https://docs.ropensci.org/rerddap/articles/rerddap.html","id":"search","dir":"Articles","previous_headings":"","what":"Search","title":"rerddap introduction","text":"First, likely want search data, specify either griddadp tabledap now convenience function search list ERDDAP servers, designed work function servers()","code":"ed_search(query = 'size', which = \"table\") #> # A tibble: 36 × 2 #>    title                                                              dataset_id #>    <chr>                                                              <chr>      #>  1 CCE Prey Size and Hard Part Size Regressions                       mmtdPreyS… #>  2 CCE Teleost Prey Size and Hard Part Size Measurements              mmtdTeleo… #>  3 CalCOFI Larvae Sizes                                               erdCalCOF… #>  4 CCE Non-Teleost Prey Size and Hard Part Size Measurements          mmtdNonTe… #>  5 Channel Islands, Kelp Forest Monitoring, Size and Frequency, Natu… erdCinpKf… #>  6 File Names from the AWS S3 noaa-goes16 Bucket                      awsS3Noaa… #>  7 File Names from the AWS S3 noaa-goes17 Bucket                      awsS3Noaa… #>  8 PacIOOS Beach Camera 001: Waikiki, Oahu, Hawaii                    BEACHCAM-… #>  9 PacIOOS Beach Camera 003: Waimea Bay, Oahu, Hawaii                 BEACHCAM-… #> 10 PacIOOS Beach Camera 004: Waimea Bay (Offshore), Oahu, Hawaii      BEACHCAM-… #> # ℹ 26 more rows ed_search(query = 'size', which = \"grid\") #> # A tibble: 103 × 2 #>    title                                                              dataset_id #>    <chr>                                                              <chr>      #>  1 Audio data from a local source.                                    testGridW… #>  2 Main Hawaiian Islands Multibeam Bathymetry Synthesis: 50-m Bathym… hmrg_bath… #>  3 Main Hawaiian Islands Multibeam Bathymetry Synthesis: 50-m Bathym… hmrg_bath… #>  4 Coastal Upwelling Transport Index (CUTI), Daily                    erdCUTIda… #>  5 SST smoothed frontal gradients                                     FRD_SSTgr… #>  6 Coastal Upwelling Transport Index (CUTI), Monthly                  erdCUTImo… #>  7 SST smoothed frontal gradients, Lon0360                            FRD_SSTgr… #>  8 Biologically Effective Upwelling Transport Index (BEUTI), Daily    erdBEUTId… #>  9 Biologically Effective Upwelling Transport Index (BEUTI), Monthly  erdBEUTIm… #> 10 Daily averaged and put on grid 4x daily NCEP reanalysis (psi.2012) noaa_psl_… #> # ℹ 93 more rows server_list <- c(   emodnet_physics = 'https://erddap.emodnet-physics.eu/erddap/',   irish_marine_institute = 'https://erddap.marine.ie/erddap/' ) global_search(query = 'size', server_list, 'griddap') #>                                                                                                                                                              title #> 1                                          EMODnet Physics - Total Suspended Matter - GridSeriesObservation - Concentration of total suspended matter - BALTIC SEA #> 2                                   EMODnet Physics - Total Suspended Matter - GridSeriesObservation - Concentration of total suspended matter - MEDITERRANEAN SEA #> 3                  EMODnet Physics - Total Suspended Matter - GridSeriesObservation - Concentration of total suspended matter - MEDITERRANEAN SEA - LOW RESOLUTION #> 4                                                                                                           EMODnet Physics - TEMPERATURE YEARLY RECORDING DENSITY #> 5                                                                  EMODPACE - Monthly sea level derived from CMEMS-DUACS (DT-2018) satellite altimetry (1993-2019) #> 6                                           EMODnet Physics - Total Suspended Matter - GridSeriesObservation - Concentration of total suspended matter - NORTH SEA #> 7                                                       EMODPACE - Absolute sea level trend (1993 – 2019) - derived from CMEMS-DUACS (DT-2018) satellite altimetry #> 8 EMODPACE - Sea Level monthly mean, EurAsia. This product is based, uses and reprocess the CMEMS product id. SEALEVEL_GLO_PHY_CLIMATE_L4_REP_OBSERVATIONS_008_057 #> 9                                                                                                                                 COMPASS-NEATL Hindcast 2016-2020 #>                                  dataset_id #> 1                             TSM_BALTICSEA #> 2                                 TSM_MBSEA #> 3                   TSM_MBSEA_LOWRESOLUTION #> 4                           ERD_EP_TEMP_DNS #> 5 EMODPACE_SLEV_MONTHLY_MEAN_DESEASONALIZED #> 6                              TSM_NORTHSEA #> 7                       EMODPACE_SLEV_TREND #> 8                EMODPACE_SLEV_MONTHLY_MEAN #> 9               compass_neatl_hindcast_grid #>                                         url #> 1 https://erddap.emodnet-physics.eu/erddap/ #> 2 https://erddap.emodnet-physics.eu/erddap/ #> 3 https://erddap.emodnet-physics.eu/erddap/ #> 4 https://erddap.emodnet-physics.eu/erddap/ #> 5 https://erddap.emodnet-physics.eu/erddap/ #> 6 https://erddap.emodnet-physics.eu/erddap/ #> 7 https://erddap.emodnet-physics.eu/erddap/ #> 8 https://erddap.emodnet-physics.eu/erddap/ #> 9          https://erddap.marine.ie/erddap/"},{"path":"https://docs.ropensci.org/rerddap/articles/rerddap.html","id":"information","dir":"Articles","previous_headings":"","what":"Information","title":"rerddap introduction","text":"can get information single dataset","code":"info('erdCalCOFIlrvsiz') #> <ERDDAP info> erdCalCOFIlrvsiz  #>  Base URL: https://upwell.pfeg.noaa.gov/erddap  #>  Dataset Type: tabledap  #>  Variables:   #>      calcofi_species_code:  #>          Range: 19, 946  #>      common_name:  #>      cruise:  #>      itis_tsn:  #>      larvae_10m2:  ..."},{"path":"https://docs.ropensci.org/rerddap/articles/rerddap.html","id":"griddap-gridded-data","dir":"Articles","previous_headings":"","what":"griddap (gridded) data","title":"rerddap introduction","text":"First, get information dataset see time range, lat/long range, variables. query gridded data using griddap() function output griddap() list can explore . Get summary Get dimension variables Get data.frame (beware: may want just look head data.frame large)","code":"(out <- info('erdMBchla1day')) #> <ERDDAP info> erdMBchla1day  #>  Base URL: https://upwell.pfeg.noaa.gov/erddap  #>  Dataset Type: griddap  #>  Dimensions (range):   #>      time: (2006-01-01T12:00:00Z, 2023-06-27T12:00:00Z)  #>      altitude: (0.0, 0.0)  #>      latitude: (-45.0, 65.0)  #>      longitude: (120.0, 320.0)  #>  Variables:   #>      chlorophyll:  #>          Units: mg m-3 (res <- griddap(out,   time = c('2015-01-01','2015-01-03'),   latitude = c(14, 15),   longitude = c(125, 126) )) #> <ERDDAP griddap> erdMBchla1day #>    Path: [/var/folders/xw/mcmsdzzx4mgbttplylgs7ysh0000gp/T//RtmpoME6FV/R/rerddap/4d844aa48552049c3717ac94ced5f9b8.nc] #>    Last updated: [2023-06-29 13:18:53.945082] #>    File size:    [0.03 mb] #>    Dimensions (dims/vars):   [4 X 1] #>    Dim names: time, altitude, latitude, longitude #>    Variable names: Chlorophyll Concentration in Sea Water #>    data.frame (rows/columns):   [5043 X 5] #> # A tibble: 5,043 × 5 #>    longitude  latitude  altitude time                 chlorophyll #>    <dbl[1d]> <dbl[1d]> <dbl[1d]> <chr>                      <dbl> #>  1      125         14         0 2015-01-01T12:00:00Z          NA #>  2      125.        14         0 2015-01-01T12:00:00Z          NA #>  3      125.        14         0 2015-01-01T12:00:00Z          NA #>  4      125.        14         0 2015-01-01T12:00:00Z          NA #>  5      125.        14         0 2015-01-01T12:00:00Z          NA #>  6      125.        14         0 2015-01-01T12:00:00Z          NA #>  7      125.        14         0 2015-01-01T12:00:00Z          NA #>  8      125.        14         0 2015-01-01T12:00:00Z          NA #>  9      125.        14         0 2015-01-01T12:00:00Z          NA #> 10      125.        14         0 2015-01-01T12:00:00Z          NA #> # ℹ 5,033 more rows res$summary #> $filename #> [1] \"/var/folders/xw/mcmsdzzx4mgbttplylgs7ysh0000gp/T//RtmpoME6FV/R/rerddap/4d844aa48552049c3717ac94ced5f9b8.nc\" #>  #> $writable #> [1] FALSE #>  #> $id #> [1] 65536 #>  #> $error #> [1] FALSE #>  #> $safemode #> [1] FALSE #>  ... names(res$summary$dim) #> [1] \"time\"      \"altitude\"  \"latitude\"  \"longitude\" head(res$data) #>   longitude latitude altitude                 time chlorophyll #> 1   125.000       14        0 2015-01-01T12:00:00Z          NA #> 2   125.025       14        0 2015-01-01T12:00:00Z          NA #> 3   125.050       14        0 2015-01-01T12:00:00Z          NA #> 4   125.075       14        0 2015-01-01T12:00:00Z          NA #> 5   125.100       14        0 2015-01-01T12:00:00Z          NA #> 6   125.125       14        0 2015-01-01T12:00:00Z          NA"},{"path":"https://docs.ropensci.org/rerddap/articles/rerddap.html","id":"tabledap-tabular-data","dir":"Articles","previous_headings":"","what":"tabledap (tabular) data","title":"rerddap introduction","text":"Since griddap() tabledap() give back data.frame’s, ’s easy downstream manipulation. example, can use dplyr filter, summarize, group, sort:","code":"(out <- info('erdCalCOFIlrvsiz')) #> <ERDDAP info> erdCalCOFIlrvsiz  #>  Base URL: https://upwell.pfeg.noaa.gov/erddap  #>  Dataset Type: tabledap  #>  Variables:   #>      calcofi_species_code:  #>          Range: 19, 946  #>      common_name:  #>      cruise:  #>      itis_tsn:  #>      larvae_10m2:  ... (dat <- tabledap('erdCalCOFIlrvsiz', fields=c('latitude','longitude','larvae_size',   'scientific_name'), 'time>=2011-01-01', 'time<=2011-12-31')) #> <ERDDAP tabledap> erdCalCOFIlrvsiz #>    Path: [/var/folders/xw/mcmsdzzx4mgbttplylgs7ysh0000gp/T//RtmpoME6FV/R/rerddap/db7389db5b5b0ed9c426d5c13bc43d18.csv] #>    Last updated: [2023-06-29 13:18:57.579066] #>    File size:    [0.05 mb] #> # A tibble: 1,304 × 4 #>    latitude  longitude  larvae_size scientific_name      #>    <chr>     <chr>      <chr>       <chr>                #>  1 32.956665 -117.305   4.5         Engraulis mordax     #>  2 32.91     -117.4     5.0         Merluccius productus #>  3 32.511665 -118.21167 2.0         Merluccius productus #>  4 32.511665 -118.21167 3.0         Merluccius productus #>  5 32.511665 -118.21167 5.5         Merluccius productus #>  6 32.511665 -118.21167 6.0         Merluccius productus #>  7 32.511665 -118.21167 2.8         Merluccius productus #>  8 32.511665 -118.21167 3.0         Sardinops sagax      #>  9 32.511665 -118.21167 5.0         Sardinops sagax      #> 10 32.511665 -118.21167 2.5         Engraulis mordax     #> # ℹ 1,294 more rows library(\"dplyr\") dat$larvae_size <- as.numeric(dat$larvae_size) dat %>%   group_by(scientific_name) %>%   summarise(mean_size = mean(larvae_size)) %>%   arrange(desc(mean_size)) #> # A tibble: 7 × 2 #>   scientific_name       mean_size #>   <chr>                     <dbl> #> 1 Anoplopoma fimbria        23.3  #> 2 Engraulis mordax           9.26 #> 3 Sardinops sagax            7.28 #> 4 Merluccius productus       5.48 #> 5 Tactostoma macropus        5    #> 6 Scomber japonicus          3.4  #> 7 Trachurus symmetricus      3.29"},{"path":"https://docs.ropensci.org/rerddap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author. Ben Tupper. Contributor. Salvador Jesús Fernández Bejarano. Contributor. Roy Mendelssohn. Maintainer, contributor.","code":""},{"path":"https://docs.ropensci.org/rerddap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S (2024). rerddap: General Purpose Client 'ERDDAP' Servers. R package version 1.1.0, https://github.com/ropensci/rerddap, https://docs.ropensci.org/rerddap/.","code":"@Manual{,   title = {rerddap: General Purpose Client for 'ERDDAP' Servers},   author = {Scott Chamberlain},   year = {2024},   note = {R package version 1.1.0, https://github.com/ropensci/rerddap},   url = {https://docs.ropensci.org/rerddap/}, }"},{"path":"https://docs.ropensci.org/rerddap/index.html","id":"rerddap","dir":"","previous_headings":"","what":"General Purpose Client for ERDDAP Servers","title":"General Purpose Client for ERDDAP Servers","text":"rerddap general purpose R client working ERDDAP servers. Package Docs: https://docs.ropensci.org/rerddap/","code":""},{"path":"https://docs.ropensci.org/rerddap/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"General Purpose Client for ERDDAP Servers","text":"CRAN development version GitHub users may experience installation error, stating install 1 packages, e.g., may need DBI, case , example, install.packages(\"DBI\") installing rerddap.","code":"install.packages(\"rerddap\") remotes::install_github(\"ropensci/rerddap\") library(\"rerddap\")"},{"path":"https://docs.ropensci.org/rerddap/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"General Purpose Client for ERDDAP Servers","text":"ERDDAP server built top OPenDAP, serves NOAA data. can get gridded data (griddap (https://upwell.pfeg.noaa.gov/erddap/griddap/documentation.html)), lets query gridded datasets, table data (tabledap (https://upwell.pfeg.noaa.gov/erddap/tabledap/documentation.html)) lets query tabular datasets. terms interface , similarities, differences . try make similar interface data types rerddap.","code":""},{"path":"https://docs.ropensci.org/rerddap/index.html","id":"netcdf","dir":"","previous_headings":"","what":"NetCDF","title":"General Purpose Client for ERDDAP Servers","text":"rerddap supports NetCDF format, default using griddap() function. NetCDF binary file format, much smaller footprint disk csv. binary file format means ’s harder inspect, ncdf4 package makes easy pull data write data back NetCDF file. Note file extension NetCDF files .nc. Whether choose NetCDF csv small files won’t make much difference, large files.","code":""},{"path":"https://docs.ropensci.org/rerddap/index.html","id":"caching","dir":"","previous_headings":"","what":"Caching","title":"General Purpose Client for ERDDAP Servers","text":"Data files downloaded cached single directory machine determined hoardr package. use griddap() tabledap() functions, construct MD5 hash base URL, query parameters - way query separately cached. hash, look cache directory matching hash. ’s match use file disk - match, make http request data ERDDAP server specify.","code":""},{"path":"https://docs.ropensci.org/rerddap/index.html","id":"erddap-servers","dir":"","previous_headings":"","what":"ERDDAP servers","title":"General Purpose Client for ERDDAP Servers","text":"can get data.frame ERDDAP servers using function servers(). think serve kind NOAA data, aren’t NOAA data. know ERDDAP servers, send pull request, let us know.","code":""},{"path":"https://docs.ropensci.org/rerddap/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"General Purpose Client for ERDDAP Servers","text":"Please report issues bugs. License: MIT Get citation information rerddap R citation(package = 'rerddap') Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/reference/browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse a dataset webpage. — browse","title":"Browse a dataset webpage. — browse","text":"Note error call base::interactive() returns FALSE","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse a dataset webpage. — browse","text":"","code":"browse(x, url = eurl(), ...)"},{"path":"https://docs.ropensci.org/rerddap/reference/browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse a dataset webpage. — browse","text":"x datasetid object associated datasetid info(), griddap() tabledap() url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/ - See eurl() information ... args passed utils::browseURL (must named parameter)","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/browse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse a dataset webpage. — browse","text":"interactive mode, opens URL default browser; , prints URL console","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/browse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Browse a dataset webpage. — browse","text":"Ben Tupper btupper@bigelow.org","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse a dataset webpage. — browse","text":"","code":"if (FALSE) { if (interactive()) { # browse by dataset_id browse('erdATastnhday')  # browse info class my_info <- info('erdATastnhday') browse(my_info)  # browse tabledap class my_tabledap <- tabledap('erdCalCOFIlrvsiz', fields=c('latitude','longitude','larvae_size',    'itis_tsn'), 'time>=2011-10-25', 'time<=2011-10-31') browse(my_tabledap) }}"},{"path":"https://docs.ropensci.org/rerddap/reference/cache_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete cached files — cache_delete","title":"Delete cached files — cache_delete","text":"Delete cached files","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/cache_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete cached files — cache_delete","text":"","code":"cache_delete(x, force = FALSE)  cache_delete_all(force = FALSE)"},{"path":"https://docs.ropensci.org/rerddap/reference/cache_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete cached files — cache_delete","text":"x File names force (logical) files force deleted? Default: FALSE","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/reference/cache_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete cached files — cache_delete","text":"","code":"if (FALSE) { # delete files by name in cache # cache_delete('9911750294a039b8b517c8bf288978ea.csv') # cache_delete(c('9911750294a039b8b517c8bf288978ea.csv', #                'b26825b6737da13d6a52c28c8dfe690f.csv'))  # You can delete from the output of griddap or tabledap fxns ## tabledap (table_res <- tabledap('erdCinpKfmBT')) cache_delete(table_res)  ## griddap (out <- info('erdQMekm14day')) (grid_res <- griddap(out,  time = c('2015-12-28','2016-01-01'),  latitude = c(24, 23),  longitude = c(88, 90) )) cache_delete(grid_res) }"},{"path":"https://docs.ropensci.org/rerddap/reference/cache_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details of cached files — cache_details","title":"Get details of cached files — cache_details","text":"Get details cached files","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/cache_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details of cached files — cache_details","text":"","code":"cache_details(x)"},{"path":"https://docs.ropensci.org/rerddap/reference/cache_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details of cached files — cache_details","text":"x File names","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/cache_details.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get details of cached files — cache_details","text":"Can used list details files, .nc .csv types, details just individual files class tabledap, griddap_nc, griddap_csv","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/reference/cache_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details of cached files — cache_details","text":"","code":"if (FALSE) { # List details for all cached files cache_details() }"},{"path":"https://docs.ropensci.org/rerddap/reference/cache_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List cached files — cache_list","title":"List cached files — cache_list","text":"List cached files","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/cache_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List cached files — cache_list","text":"","code":"cache_list()"},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/reference/cache_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List cached files — cache_list","text":"","code":"if (FALSE) { # list files in cache cache_list()  # List info for files ## download some data first tabledap('erdCinpKfmBT') griddap('erdVHNchlamday',  time = c('2015-04-01','2015-04-10'),  latitude = c(18, 21),  longitude = c(-120, -119) )  (x <- cache_list()) cache_details(x$nc[1]) cache_details(x$csv[1]) cache_details()  # delete files by name in cache # cache_delete(x$nc[1]) # cache_delete(x$nc[2:3]) }"},{"path":"https://docs.ropensci.org/rerddap/reference/cache_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup cache path — cache_setup","title":"Setup cache path — cache_setup","text":"Setup cache path","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/cache_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup cache path — cache_setup","text":"","code":"cache_setup(full_path = NULL, temp_dir = FALSE)  cache_info()"},{"path":"https://docs.ropensci.org/rerddap/reference/cache_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup cache path — cache_setup","text":"full_path (character) full path use storing cached files. temp_dir (logical) TRUE use randomly assigned tempdir (full_path ignored), FALSE, can use full_path.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/cache_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup cache path — cache_setup","text":"full cache path, directory (character)","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/cache_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup cache path — cache_setup","text":"opening,  default temporary directory created caching files.  files cached elsewhere,  give full path cache files.  Adding temp_dir = TRUE use temporary dirctory cacheing.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/reference/cache_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup cache path — cache_setup","text":"","code":"if (FALSE) { # default path cache_setup()  # you can define your own path cache_setup(path = \"foobar\")  # set a tempdir - better for programming with to avoid prompt cache_setup(temp_dir = TRUE)  # cache info cache_info() }"},{"path":"https://docs.ropensci.org/rerddap/reference/colors.html","id":null,"dir":"Reference","previous_headings":"","what":"cmocean colors\nThe cmocean color palette by Kristen Thyng as implemented in the R package ","title":"cmocean colors\nThe cmocean color palette by Kristen Thyng as implemented in the R package ","text":"str(colors) List 13 $ viridis $ cdom $ chlorophyll $ density $ freesurface $ oxygen $ par $ phase $ salinity $ temperature $ turbidity $ velocity $ vorticity","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cmocean colors\nThe cmocean color palette by Kristen Thyng as implemented in the R package ","text":"","code":"colors"},{"path":"https://docs.ropensci.org/rerddap/reference/colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cmocean colors\nThe cmocean color palette by Kristen Thyng as implemented in the R package ","text":"object class list length 13.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/convert_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a UDUNITS compatible time to ISO time — convert_time","title":"Convert a UDUNITS compatible time to ISO time — convert_time","text":"Convert UDUNITS compatible time ISO time","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/convert_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a UDUNITS compatible time to ISO time — convert_time","text":"","code":"convert_time(   n = NULL,   isoTime = NULL,   units = \"seconds since 1970-01-01T00:00:00Z\",   url = eurl(),   method = \"local\",   ... )"},{"path":"https://docs.ropensci.org/rerddap/reference/convert_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a UDUNITS compatible time to ISO time — convert_time","text":"n numeric; unix time number. isoTime character; string time representation. units character; Units return. Default: \"seconds since 1970-01-01T00:00:00Z\" url Base URL ERDDAP server. See eurl() information method (character) One local web. Local simply uses .POSIXct(), web method uses ERDDAP time conversion service /erddap/convert/time.txt ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/convert_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a UDUNITS compatible time to ISO time — convert_time","text":"method = \"web\" time zone GMT/UTC","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/convert_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a UDUNITS compatible time to ISO time — convert_time","text":"","code":"if (FALSE) { # local conversions convert_time(n = 473472000) convert_time(isoTime = \"1985-01-02T00:00:00Z\")  # using an erddap web service convert_time(n = 473472000, method = \"web\") convert_time(isoTime = \"1985-01-02T00:00:00Z\", method = \"web\") }"},{"path":"https://docs.ropensci.org/rerddap/reference/convert_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a CF Standard Name to/from a GCMD Science Keyword — convert_units","title":"Convert a CF Standard Name to/from a GCMD Science Keyword — convert_units","text":"Convert CF Standard Name /GCMD Science Keyword","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/convert_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a CF Standard Name to/from a GCMD Science Keyword — convert_units","text":"","code":"convert_units(udunits = NULL, ucum = NULL, url = eurl(), ...)"},{"path":"https://docs.ropensci.org/rerddap/reference/convert_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a CF Standard Name to/from a GCMD Science Keyword — convert_units","text":"udunits character; UDUNITS character string https://www.unidata.ucar.edu/software/udunits/ ucum character; UCUM character string https://ucum.org/ucum.html url Base URL ERDDAP server. See eurl() information ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/convert_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a CF Standard Name to/from a GCMD Science Keyword — convert_units","text":"","code":"if (FALSE) { convert_units(udunits = \"degree_C meter-1\") convert_units(ucum = \"Cel.m-1\") }"},{"path":"https://docs.ropensci.org/rerddap/reference/disk.html","id":null,"dir":"Reference","previous_headings":"","what":"Options for saving ERDDAP datasets. — disk","title":"Options for saving ERDDAP datasets. — disk","text":"Options saving ERDDAP datasets.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/disk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options for saving ERDDAP datasets. — disk","text":"","code":"disk(path = NULL, overwrite = TRUE)  memory()"},{"path":"https://docs.ropensci.org/rerddap/reference/disk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options for saving ERDDAP datasets. — disk","text":"path Path store files . directory, file. Default: root cache path, see cache_setup overwrite (logical) Overwrite existing file name? Default: TRUE","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for ERDDAP tabledep or griddap datasets — ed_search","title":"Search for ERDDAP tabledep or griddap datasets — ed_search","text":"Search ERDDAP tabledep griddap datasets","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for ERDDAP tabledep or griddap datasets — ed_search","text":"","code":"ed_search(   query,   page = NULL,   page_size = NULL,   which = \"griddap\",   url = eurl(),   ... )  ed_datasets(which = \"tabledap\", url = eurl())"},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for ERDDAP tabledep or griddap datasets — ed_search","text":"query (character) Search terms page (integer) Page number page_size (integer) Results per page (character) One tabledep griddap. url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/ - See eurl() information ... Curl options passed crul::verb-GET (must named parameters)","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search for ERDDAP tabledep or griddap datasets — ed_search","text":"https://upwell.pfeg.noaa.gov/erddap/index.html","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for ERDDAP tabledep or griddap datasets — ed_search","text":"","code":"if (FALSE) { (out <- ed_search(query='temperature')) out$alldata[[1]] (out <- ed_search(query='size')) out$info  # List datasets ed_datasets('table') ed_datasets('grid')  # use a different ERDDAP server ## Marine Institute (Ireland) ed_search(\"temperature\", url = \"http://erddap.marine.ie/erddap/\") }"},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search_adv.html","id":null,"dir":"Reference","previous_headings":"","what":"Advanced search for ERDDAP tabledep or griddap datasets — ed_search_adv","title":"Advanced search for ERDDAP tabledep or griddap datasets — ed_search_adv","text":"Advanced search ERDDAP tabledep griddap datasets","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search_adv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advanced search for ERDDAP tabledep or griddap datasets — ed_search_adv","text":"","code":"ed_search_adv(   query = NULL,   page = 1,   page_size = 1000,   protocol = NULL,   cdm_data_type = NULL,   institution = NULL,   ioos_category = NULL,   keywords = NULL,   long_name = NULL,   standard_name = NULL,   variableName = NULL,   maxLat = NULL,   minLon = NULL,   maxLon = NULL,   minLat = NULL,   minTime = NULL,   maxTime = NULL,   url = eurl(),   ... )"},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search_adv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Advanced search for ERDDAP tabledep or griddap datasets — ed_search_adv","text":"query (character) Search terms page (integer) Page number. Default: 1 page_size (integer) Results per page: Default: 1000 protocol (character) One (default), tabledep griddap cdm_data_type (character) One grid, , point, profile, timeseries, timeseriesprofile, trajectory, trajectoryprofile institution (character) institution. See dataset institutions ioos_category (character) ioos category See dataset ioos_categories keywords (character) keywords. See dataset keywords long_name (character) long name. See dataset longnames standard_name (character) standar dname. See dataset standardnames variableName (character) variable name. See dataset variablenames minLon, maxLon (numeric) Minimum maximum longitude. datasets longitude values within -180 180, others use 0 360. specify min max Longitude within -180 180 (0 360), ERDDAP find datasets match values specify. Consider one search: longitude -180 360, two searches: longitude -180 180, 0 360. minLat, maxLat (numeric) Minimum maximum latitude, -90 90 minTime, maxTime (numeric/character) Minimum maximum time. Time string format \"yyyy-MM-ddTHH:mm:ssZ, (e.g., 2009-01-21T23:00:00Z). specify something, must include least yyyy-MM-dd; can omit Z, :ss, :mm, :HH, T. Always use UTC (GMT/Zulu) time. specify number seconds since 1970-01-01T00:00:00Z. url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/ - See eurl() information ... Curl options passed crul::verb-GET (must named parameters)","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search_adv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Advanced search for ERDDAP tabledep or griddap datasets — ed_search_adv","text":"https://upwell.pfeg.noaa.gov/erddap/index.html","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ed_search_adv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Advanced search for ERDDAP tabledep or griddap datasets — ed_search_adv","text":"","code":"if (FALSE) { ed_search_adv(query = 'temperature') ed_search_adv(query = 'temperature', protocol = \"griddap\") ed_search_adv(query = 'temperature', protocol = \"tabledap\") ed_search_adv(maxLat = 63, minLon = -107, maxLon = -87, minLat = 50,   protocol = \"griddap\") ed_search_adv(maxLat = 63, minLon = -107, maxLon = -87, minLat = 50,   protocol = \"tabledap\") ed_search_adv(minTime = \"2010-01-01T00:00:00Z\",   maxTime=\"2010-02-01T00:00:00Z\") (out <- ed_search_adv(maxLat = 63, minLon = -107, maxLon = -87, minLat = 50,              minTime = \"2010-01-01T00:00:00Z\",              maxTime=\"2010-02-01T00:00:00Z\")) out$alldata[[1]] ed_search_adv(variableName = 'upwelling') ed_search_adv(query = 'upwelling', protocol = \"tabledap\")  # use a different URL ed_search_adv(query = 'temperature', url = servers()$url[6]) }"},{"path":"https://docs.ropensci.org/rerddap/reference/eurl.html","id":null,"dir":"Reference","previous_headings":"","what":"Default ERDDAP server URL — eurl","title":"Default ERDDAP server URL — eurl","text":"Default ERDDAP server URL","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/eurl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default ERDDAP server URL — eurl","text":"","code":"eurl()"},{"path":"https://docs.ropensci.org/rerddap/reference/eurl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default ERDDAP server URL — eurl","text":"default url https://upwell.pfeg.noaa.gov/erddap/ can set default using environment variable pass anything URL parameter function calls. .Renviron file similar set URL environment variable RERDDAP_DEFAULT_URL, like RERDDAP_DEFAULT_URL=https://upwell.pfeg.noaa.gov/erddap/ important include trailing slash URL","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/eurl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default ERDDAP server URL — eurl","text":"","code":"eurl() #> [1] \"https://upwell.pfeg.noaa.gov/erddap/\" Sys.setenv(RERDDAP_DEFAULT_URL = \"https://google.com\") Sys.getenv(\"RERDDAP_DEFAULT_URL\") #> [1] \"https://google.com\" eurl() #> [1] \"https://google.com/\" Sys.unsetenv(\"RERDDAP_DEFAULT_URL\") eurl() #> [1] \"https://upwell.pfeg.noaa.gov/erddap/\""},{"path":"https://docs.ropensci.org/rerddap/reference/fipscounty.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a FIPS County Code to/from a County Name — fipscounty","title":"Convert a FIPS County Code to/from a County Name — fipscounty","text":"Convert FIPS County Code /County Name","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/fipscounty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a FIPS County Code to/from a County Name — fipscounty","text":"","code":"fipscounty(county = NULL, code = NULL, url = eurl(), ...)"},{"path":"https://docs.ropensci.org/rerddap/reference/fipscounty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a FIPS County Code to/from a County Name — fipscounty","text":"county character; county name. code numeric; FIPS code. url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/ - See eurl() information ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/fipscounty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a FIPS County Code to/from a County Name — fipscounty","text":"","code":"if (FALSE) { fipscounty(code = \"06053\") fipscounty(county = \"CA, Monterey\") fipscounty(county = \"OR, Multnomah\") }"},{"path":"https://docs.ropensci.org/rerddap/reference/global_search.html","id":null,"dir":"Reference","previous_headings":"","what":"global_search — global_search","title":"global_search — global_search","text":"Search ERDDAP tabledap griddap datasets list ERDDAP servers based search terms.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/global_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"global_search — global_search","text":"","code":"global_search(query, server_list, which_service)"},{"path":"https://docs.ropensci.org/rerddap/reference/global_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"global_search — global_search","text":"query (character) Search terms server_list (list character) List ERDDAP servers search which_service (character) One tabledep griddap.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/global_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"global_search — global_search","text":"successful dataframe wih columns: title - dataset title dataset_id - datasetid ERDDAP server url - base url dataset ERDDAP server urls valid,  match found,  return match found else returns error message","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/global_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"global_search — global_search","text":"Uses 'reddap' function ed_search() search list servers","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/reference/global_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"global_search — global_search","text":"","code":"# get list of servers know by # https://irishmarineinstitute.github.io/awesome-erddap # e_servers <- servers()$url # select a couple to search # e_servers <- e_servers[c(1, 40)] # to meet CRAN time limits will only search 1 place e_servers <- \"https://coastwatch.pfeg.noaa.gov/erddap/\" test_query <- 'NOAA/NCDC Blended Monthly' query_results <- global_search(test_query, e_servers, \"griddap\") #> [1] \"no search results found\""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ERDDAP gridded data — griddap","title":"Get ERDDAP gridded data — griddap","text":"Get ERDDAP gridded data","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ERDDAP gridded data — griddap","text":"","code":"griddap(   datasetx,   ...,   fields = \"all\",   stride = 1,   fmt = \"nc\",   url = eurl(),   store = disk(),   read = TRUE,   callopts = list() )"},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ERDDAP gridded data — griddap","text":"datasetx Anything coercable object class info. output call info, datasetid, internally passed info ... Dimension arguments. See examples. Can 1 dimensions particular dataset - dimensions vary dataset. dimension, pass vector length two, min max value desired. least 1 required. fields (character) Fields return, character vector. stride (integer) many values get. 1 = get every value, 2 = get every value, etc. Default: 1 (.e., get every value) fmt (character) One csv nc (netcdf). Default: nc url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/ - See eurl() information store One disk (default) memory. can pass options disk. Beware: choose fmt=\"nc\", force store=disk() nc files written disk. read (logical) Read data memory . apply store parameter set memory (reads data memory). large csv, especially netcdf files, may want set FALSE, simply returns summary dataset - can read data piecemeal later. Default: TRUE callopts Curl options passed verb-GET","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ERDDAP gridded data — griddap","text":"object class griddap_csv csv chosen griddap_nc nc file format chosen. griddap_csv: data.frame created downloaded csv data griddap_nc: list, slots \"summary\" \"data\". \"summary\" unclassed output ncdf4::nc_open, can netcdf operations like. \"data\" data.frame created netcdf data. data.frame may empty problems parsing netcdf data attributes: datasetid (dataset id), path (path file csv nc file), url (url requested ERDDAP server) read=FALSE, data.frame griddap_csv data.frame \"data\" slot empty griddap_nc","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get ERDDAP gridded data — griddap","text":"Details: run error like \"HTTP Status 500 - (temporary?) problem. Wait minute, try .\". likely hitting size limit, reduce amount data requesting either via space, time, variables. Pass config = verbose() request, paste URL browser see output garbled examine problem servers package","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"dimensions-and-variables","dir":"Reference","previous_headings":"","what":"Dimensions and Variables","title":"Get ERDDAP gridded data — griddap","text":"ERDDAP grid dap data concept dimenions vs. variables. Dimensions things like time, latitude, longitude, altitude, depth. Whereas variables measured variables, e.g., temperature, salinity, air. separately adjust values dimensions different variables. , gonna work: Pass lower upper limits want dimension vector (e.g., c(1,2)), leave defaults (.e., pass anything dimension). pick variables want returned via fields parameter. pass options fields parameter, get variables back. get dimensions variables, along metadata dataset, run info, shown, min max values, metadata.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"where-does-the-data-go-","dir":"Reference","previous_headings":"","what":"Where does the data go?","title":"Get ERDDAP gridded data — griddap","text":"can choose data stored. careful though. can easily get single file hundreds MB's (upper limit: 2 GB) size single request. store parameter, pass memory want store data memory (saved data.frame), pass disk want store disk file. Note memory disk character strings, function calls. memory accept inputs, disk . Possibly add options, like “sql” storing SQL database.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"non-lat-lon-grid-data","dir":"Reference","previous_headings":"","what":"Non-lat/lon grid data","title":"Get ERDDAP gridded data — griddap","text":"gridded datasets latitude/longitude components, . nc format gridded datasets latitude longitude \"melt\" data.frame easy downstream consumption. nc format gridded datasets latitude longitude components, read data, throw warning saying . can readin nc file file path. CSV format affected issue CSV data easily turned data.frame regardless whether latitude/longitude data present.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get ERDDAP gridded data — griddap","text":"https://upwell.pfeg.noaa.gov/erddap/rest.html","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/griddap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ERDDAP gridded data — griddap","text":"","code":"if (FALSE) { # single variable dataset ## You can pass in the outpu of a call to info (out <- info('erdVHNchlamday')) ## Or, pass in a dataset id (res <- griddap('erdVHNchlamday',  time = c('2015-04-01','2015-04-10'),  latitude = c(18, 21),  longitude = c(-120, -119) ))  # multi-variable dataset (out <- info('erdQMekm14day')) (res <- griddap(out,  time = c('2015-12-28','2016-01-01'),  latitude = c(24, 23),  longitude = c(88, 90) )) (res <- griddap(out, time = c('2015-12-28','2016-01-01'),    latitude = c(24, 23), longitude = c(88, 90), fields = 'mod_current')) (res <- griddap(out, time = c('2015-12-28','2016-01-01'),    latitude = c(24, 23), longitude = c(88, 90), fields = 'mod_current',    stride = c(1,2,1,2))) (res <- griddap(out, time = c('2015-12-28','2016-01-01'),    latitude = c(24, 23), longitude = c(88, 90),    fields = c('mod_current','u_current')))   # Write to memory (within R), or to disk (out <- info('erdQSwindmday')) ## disk, by default (to prevent bogging down system w/ large datasets) ## you can also pass in path and overwrite options to disk() (res <- griddap(out,  time = c('2006-07-11','2006-07-20'),  longitude = c(166, 170),  store = disk() )) ## the 2nd call is much faster as it's mostly just the time of reading in ## the table from disk system.time( griddap(out,  time = c('2006-07-11','2006-07-15'),  longitude = c(10, 15),  store = disk() ) ) system.time( griddap(out,  time = c('2006-07-11','2006-07-15'),  longitude = c(10, 15),  store = disk() ) )  ## memory - you have to choose fmt=\"csv\" if you use memory (res <- griddap(\"erdMBchla1day\",  time = c('2015-01-01','2015-01-03'),  latitude = c(14, 15),  longitude = c(125, 126),  fmt = \"csv\", store = memory() ))  ## Use ncdf4 package to parse data info(\"erdMBchla1day\") (res <- griddap(\"erdMBchla1day\",  time = c('2015-01-01','2015-01-03'),  latitude = c(14, 15),  longitude = c(125, 126) ))  # Get data in csv format ## by default, we get netcdf format data (res <- griddap('erdMBchla1day',  time = c('2015-01-01','2015-01-03'),  latitude = c(14, 15),  longitude = c(125, 126),  fmt = \"csv\" ))  # Use a different ERDDAP server url ## NOAA IOOS PacIOOS url = \"https://cwcgom.aoml.noaa.gov/erddap/\" out <- info(\"miamiacidification\", url = url) (res <- griddap(out,  time = c('2019-11-01','2019-11-03'),  latitude = c(15, 16),  longitude = c(-90, -88) )) ## pass directly into griddap() - if you pass a datasetid string directly ## you must pass in the url or you'll be querying the default ERDDAP url, ## which isn't the one you want if you're not using the default ERDDAP url griddap(\"miamiacidification\", url = url,  time = c('2019-11-01','2019-11-03'),  latitude = c(15, 16),  longitude = c(-90, -88) )  # Using 'last' ## with time griddap('erdVHNchlamday',  time = c('last-5','last'),  latitude = c(18, 21),  longitude = c(-120, -119) ) ## with latitude griddap('erdVHNchlamday',   time = c('2015-04-01','2015-04-10'),   latitude = c('last', 'last'),   longitude = c(-120, -119) ) ## with longitude griddap('erdVHNchlamday',   time = c('2015-04-01','2015-04-10'),   latitude = c(18, 21),   longitude = c('last', 'last') )  # datasets without lat/lon grid and with fmt=nc # FIXME: this dataset is gone # (x <- info('glos_tds_5912_ca66_3f41')) # res <- griddap(x, #   time = c('2018-04-01','2018-04-10'), #   ny = c(1, 2), #   nx = c(3, 5) # ) ## data.frame is empty # res$data ## read in from the nc file path # ncdf4::nc_open(res$summary$filename) }"},{"path":"https://docs.ropensci.org/rerddap/reference/info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information on an ERDDAP dataset. — info","title":"Get information on an ERDDAP dataset. — info","text":"Get information ERDDAP dataset.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information on an ERDDAP dataset. — info","text":"","code":"info(datasetid, url = eurl(), ...)  as.info(x, url)"},{"path":"https://docs.ropensci.org/rerddap/reference/info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information on an ERDDAP dataset. — info","text":"datasetid Dataset id url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/ - See eurl() information ... args passed crul::verb-GET (must named parameter) x datasetid output info","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information on an ERDDAP dataset. — info","text":"Prints summary data return, can index various information. data list length two : variables - Data.frame variables types alldata - List data variables full attributes alldata element many data.frame's, one variable, metadata variable. E.g., griddap dataset noaa_pfeg_696e_ec99_6fa6, alldata : NC_GLOBAL time latitude longitude sss","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/info.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get information on an ERDDAP dataset. — info","text":"https://upwell.pfeg.noaa.gov/erddap/index.html","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information on an ERDDAP dataset. — info","text":"","code":"if (FALSE) { # grid dap datasets info('erdATastnhday')  (out <- ed_search(query='temperature')) info(out$info$dataset_id[5]) info(out$info$dataset_id[15]) info(out$info$dataset_id[25]) info(out$info$dataset_id[150]) info(out$info$dataset_id[400]) info(out$info$dataset_id[678])  out <- info(datasetid='erdMBchla1day') ## See brief overview of the variables and range of possible values, if given out$variables ## all information on longitude out$alldata$longitude ## all information on chlorophyll out$alldata$chlorophyll  # table dap datasets (out <- ed_search(query='temperature', which = \"table\")) info(out$info$dataset_id[1]) info(out$info$dataset_id[2]) info(out$info$dataset_id[3]) info(out$info$dataset_id[4])  info('erdCinpKfmBT') out <- info('erdCinpKfmBT') ## See brief overview of the variables and range of possible values, if given out$variables ## all information on longitude out$alldata$longitude ## all information on Haliotis_corrugata_Mean_Density out$alldata$Haliotis_corrugata_Mean_Density  # use a different ERDDAP server ## Marine Institute (Ireland) info(\"IMI_CONN_2D\", url = \"http://erddap.marine.ie/erddap/\") }"},{"path":"https://docs.ropensci.org/rerddap/reference/institutions.html","id":null,"dir":"Reference","previous_headings":"","what":"institutions — institutions","title":"institutions — institutions","text":"institutions","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/institutions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"institutions — institutions","text":"character vector","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ioos_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"ioos_categories — ioos_categories","title":"ioos_categories — ioos_categories","text":"ioos_categories","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/ioos_categories.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ioos_categories — ioos_categories","text":"character vector","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/key_words.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a CF Standard Name to/from a GCMD Science Keyword — key_words","title":"Convert a CF Standard Name to/from a GCMD Science Keyword — key_words","text":"Convert CF Standard Name /GCMD Science Keyword","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/key_words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a CF Standard Name to/from a GCMD Science Keyword — key_words","text":"","code":"key_words(cf = NULL, gcmd = NULL, url = eurl(), ...)"},{"path":"https://docs.ropensci.org/rerddap/reference/key_words.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a CF Standard Name to/from a GCMD Science Keyword — key_words","text":"cf character; cf standard name http://cfconventions.org/Data/cf-standard-names/27/build/cf-standard-name-table.html gcmd character; GCMD science keyword http://gcmd.gsfc.nasa.gov/learn/keyword_list.html url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/. See eurl() information ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/key_words.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a CF Standard Name to/from a GCMD Science Keyword — key_words","text":"","code":"if (FALSE) { key_words(cf = \"air_pressure\") cat(key_words(cf = \"air_pressure\"))  # a different ERDDAP server # key_words(cf = \"air_pressure\", url = servers()$url[6]) }"},{"path":"https://docs.ropensci.org/rerddap/reference/keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"keywords — keywords","title":"keywords — keywords","text":"keywords","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/keywords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"keywords — keywords","text":"character vector","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/longnames.html","id":null,"dir":"Reference","previous_headings":"","what":"longnames — longnames","title":"longnames — longnames","text":"longnames","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/longnames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"longnames — longnames","text":"character vector","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/rerddap.html","id":null,"dir":"Reference","previous_headings":"","what":"rerddap — rerddap","title":"rerddap — rerddap","text":"General purpose R client ERDDAP servers","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/rerddap.html","id":"erddap-info","dir":"Reference","previous_headings":"","what":"ERDDAP info","title":"rerddap — rerddap","text":"NOAA's ERDDAP service holds many datasets interest. built top OPenDAP. can search datasets via ed_search(), list datasets via ed_datasets(), get information single dataset via info(), get data want either tabledap type via tabledap(), griddap type via griddap()","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/rerddap.html","id":"tabledap-griddap","dir":"Reference","previous_headings":"","what":"tabledap/griddap","title":"rerddap — rerddap","text":"tabledap griddap different interfaces query data, tabledap() griddap() separated separate functions even though internals . particular, tabledap can query /subset variables, whereas gridddap, can query /subset dimension varibles (e.g., latitude, longitude, altitude).","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/rerddap.html","id":"data-size","dir":"Reference","previous_headings":"","what":"Data size","title":"rerddap — rerddap","text":"griddap data via griddap() can get lot data quickly. Try small searches dataset start get sense data, can increase amount data get. See griddap() details.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/rerddap.html","id":"caching","dir":"Reference","previous_headings":"","what":"Caching","title":"rerddap — rerddap","text":"rerddap default caches requests make, happen make request , data restored cache, rather go retrieve remotely.  applications, good, can speed things lot request script, works cases ERDDAP request \"idempotent\".  means request always return thing matter requests came - depend state. However true script uses either \"last\" griddap() \"now\" tabledap() return different values time elapses data added datasets.  desirable ERDDAP purely idempotent,  \"last\" \"now\" constructs helpful people using ERDDAP dashboards, webpages, regular input models like, benefits far outweigh problems.  However, using either \"last\" \"now\" rerddap based script, want careful clear rerddap cache, otherwise request viewed ,  data last request, rather latest data, returned.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rerddap/reference/rerddap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rerddap — rerddap","text":"Maintainer: Roy Mendelssohn roy.mendelssohn@noaa.gov [contributor] Authors: Scott Chamberlain contributors: Ben Tupper [contributor] Salvador Jesús Fernández Bejarano [contributor]","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/servers.html","id":null,"dir":"Reference","previous_headings":"","what":"ERDDAP server URLS and other info — servers","title":"ERDDAP server URLS and other info — servers","text":"ERDDAP server URLS info","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/servers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ERDDAP server URLS and other info — servers","text":"","code":"servers(...)"},{"path":"https://docs.ropensci.org/rerddap/reference/servers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ERDDAP server URLS and other info — servers","text":"... curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/servers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ERDDAP server URLS and other info — servers","text":"data.frame 3 columns: name (character): ERDDAP name url (character): ERDDAP url public (logical): whether public ","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/servers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ERDDAP server URLS and other info — servers","text":"","code":"if (FALSE) { servers() }"},{"path":"https://docs.ropensci.org/rerddap/reference/standardnames.html","id":null,"dir":"Reference","previous_headings":"","what":"standardnames — standardnames","title":"standardnames — standardnames","text":"standardnames","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/standardnames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"standardnames — standardnames","text":"character vector","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/tabledap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ERDDAP tabledap data. — tabledap","title":"Get ERDDAP tabledap data. — tabledap","text":"Get ERDDAP tabledap data.","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/tabledap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ERDDAP tabledap data. — tabledap","text":"","code":"tabledap(   x,   ...,   fields = NULL,   distinct = FALSE,   orderby = NULL,   orderbymax = NULL,   orderbymin = NULL,   orderbyminmax = NULL,   units = NULL,   url = eurl(),   store = disk(),   callopts = list() )"},{"path":"https://docs.ropensci.org/rerddap/reference/tabledap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ERDDAP tabledap data. — tabledap","text":"x Anything coercable object class info. output call info(), datasetid, internally passed info() ... number key-value pairs quotes query constraints. See Details & examples fields Columns return, character vector distinct TRUE ERDDAP sort rows results table (starting first requested variable, using second requested variable first variable tie, ...), remove non-unique rows data. many situations, ERDDAP can return distinct values quickly efficiently. cases, ERDDAP must look rows source dataset. orderby used, ERDDAP sort rows results table (starting first variable, using second variable first variable tie, ...). Normally, rows data response table order arrived data source. orderBy allows request results table sorted specific way. example, use orderby=c(\"stationID,time\") get results sorted stationID, time. orderby variables MUST included list requested variables fields parameter. orderbymax Give vector one fields, must included fields parameter well. Gives back data given constraints. ERDDAP sort rows results table (starting first variable, using second variable first variable tie, ...) just keeps rows value last sort variable highest (combination values). orderbymin orderbymax parameter, except returns minimum value. orderbyminmax orderbymax parameter, except returns two rows every combination n-1 variables: one row minimum value, one row maximum value. units One 'udunits' (units described via UDUNITS standard (e.g.,degrees_C)) 'ucum' (units described via UCUM standard (e.g., Cel)). url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/ - See eurl() information store One disk (default) memory. can pass options disk callopts Curl options passed crul::verb-GET (must named parameters)","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/tabledap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ERDDAP tabledap data. — tabledap","text":"object class tabledap. class thin wrapper around data.frame, data get back data.frame metadata attached attributes (datasetid, path (path csv stored machine), url (url request))","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/tabledap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get ERDDAP tabledap data. — tabledap","text":"key-value pair query constraints, valid operators =, != (equals), =~ (regular expression test), <, <=, >, >= . regular expressions need add regular expression. others, nothing needed. Construct entry like 'time>=2001-07-07' parameter left, value right, operator middle, within set quotes. Since ERDDAP accepts values =, simply time = '2001-07-07' normally . Server-side functionality: tasks done server side. worry means. provided via parameters function. See distinct, orderby, orderbymax, orderbymin, orderbyminmax, units. Data cached based parameters use get dataset, including base url, query parameters. make exact call different R session, long clear cache, function reads data disk, request data web . run error like \"HTTP Status 500 - (temporary?) problem. Wait minute, try .\". likely hitting size limit, reduce amount data requesting either via space, time, variables. Pass config = verbose() request, paste URL browser see output garbled examine problem servers package","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/tabledap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get ERDDAP tabledap data. — tabledap","text":"https://upwell.pfeg.noaa.gov/erddap/index.html","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/tabledap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ERDDAP tabledap data. — tabledap","text":"","code":"if (FALSE) { # Just passing the datasetid without fields gives all columns back tabledap('erdCinpKfmBT')  # Pass time constraints tabledap('erdCinpKfmBT', 'time>=2006-08-24')  # Pass in fields (i.e., columns to retrieve) & time constraints tabledap('erdCinpKfmBT',   fields = c('longitude', 'latitude', 'Aplysia_californica_Mean_Density'),   'time>=2006-08-24' )  # Get info on a datasetid, then get data given information learned info('erdCalCOFIlrvsiz')$variables tabledap('erdCalCOFIlrvsiz', fields=c('latitude','longitude','larvae_size',    'itis_tsn'), 'time>=2011-10-25', 'time<=2011-10-31')  # An example workflow ## Search for data (out <- ed_search(query='fish', which = 'table')) ## Using a datasetid, search for information on a datasetid id <- out$alldata[[1]]$dataset_id vars <- info(id)$variables ## Get data from the dataset vars$variable_name[1:3] tabledap(id, fields = vars$variable_name[1:3])  # Time constraint ## Limit by time with date only (info <- info('erdCinpKfmBT')) tabledap(info, fields = c(   'latitude','longitude','Haliotis_fulgens_Mean_Density'),   'time>=2001-07-14')  # Use distinct parameter - compare to distinct = FALSE tabledap('sg114_3',    fields=c('longitude','latitude','trajectory'),    'time>=2008-12-05', distinct = TRUE)  # Use units parameter ## In this example, values are the same, but sometimes they can be different ## given the units value passed tabledap('erdCinpKfmT', fields=c('longitude','latitude','time','temperature'),    'time>=2007-09-19', 'time<=2007-09-21', units='udunits') tabledap('erdCinpKfmT', fields=c('longitude','latitude','time','temperature'),    'time>=2007-09-19', 'time<=2007-09-21', units='ucum')  # Use orderby parameter tabledap('erdCinpKfmT', fields=c('longitude','latitude','time','temperature'),    'time>=2007-09-19', 'time<=2007-09-21', orderby='temperature') # Use orderbymax parameter tabledap('erdCinpKfmT', fields=c('longitude','latitude','time','temperature'),    'time>=2007-09-19', 'time<=2007-09-21', orderbymax='temperature') # Use orderbymin parameter tabledap('erdCinpKfmT', fields=c('longitude','latitude','time','temperature'),    'time>=2007-09-19', 'time<=2007-09-21', orderbymin='temperature') # Use orderbyminmax parameter tabledap('erdCinpKfmT', fields=c('longitude','latitude','time','temperature'),    'time>=2007-09-19', 'time<=2007-09-21', orderbyminmax='temperature') # Use orderbymin parameter with multiple values tabledap('erdCinpKfmT',    fields=c('longitude','latitude','time','depth','temperature'),    'time>=2007-06-10', 'time<=2007-09-21',    orderbymax=c('depth','temperature') )  # Integrate with taxize out <- tabledap('erdCalCOFIlrvcntHBtoHI',    fields = c('latitude','longitude','scientific_name','itis_tsn'),    'time>=2007-06-10', 'time<=2007-09-21' ) tsns <- unique(out$itis_tsn[1:100]) library(\"taxize\") classif <- classification(tsns, db = \"itis\") head(rbind(classif)); tail(rbind(classif))  # Write to memory (within R), or to disk (out <- info('erdCinpKfmBT')) ## disk, by default (to prevent bogging down system w/ large datasets) ## the 2nd call is much faster as it's mostly just the time of reading ## in the table from disk system.time( tabledap('erdCinpKfmBT', store = disk()) ) system.time( tabledap('erdCinpKfmBT', store = disk()) ) ## memory tabledap('erdCinpKfmBT', store = memory())  # use a different ERDDAP server ## NOAA IOOS NERACOOS url <- \"http://www.neracoos.org/erddap/\" tabledap(\"E01_optics_hist\", url = url) }"},{"path":"https://docs.ropensci.org/rerddap/reference/variablenames.html","id":null,"dir":"Reference","previous_headings":"","what":"variablenames — variablenames","title":"variablenames — variablenames","text":"variablenames","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/variablenames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"variablenames — variablenames","text":"character vector","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ERDDAP version — version","title":"Get ERDDAP version — version","text":"Get ERDDAP version","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ERDDAP version — version","text":"","code":"version(url = eurl(), ...)"},{"path":"https://docs.ropensci.org/rerddap/reference/version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ERDDAP version — version","text":"url URL ERDDAP server. Default: https://upwell.pfeg.noaa.gov/erddap/ - See eurl() information ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/rerddap/reference/version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ERDDAP version — version","text":"","code":"if (FALSE) { version() ss <- servers() version(ss$url[2]) version(ss$url[3]) }"},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-110","dir":"Changelog","previous_headings":"","what":"rerddap 1.1.0","title":"rerddap 1.1.0","text":"CRAN release: 2024-01-12 ‘tabledap()’ responses now datatype given file .dds","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-104","dir":"Changelog","previous_headings":"","what":"rerddap 1.0.4","title":"rerddap 1.0.4","text":"CRAN release: 2023-08-23 fixes problem time bounds check “last”","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-103","dir":"Changelog","previous_headings":"","what":"rerddap 1.0.3","title":"rerddap 1.0.3","text":"CRAN release: 2023-06-30 Provides exta checks time bounds. Fixes typos mistake showing ‘global_search()’ vignette","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-102","dir":"Changelog","previous_headings":"","what":"rerddap 1.0.2","title":"rerddap 1.0.2","text":"CRAN release: 2023-02-07 Ensure ‘[’ ’]’ properly encoded URL","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-101","dir":"Changelog","previous_headings":"","what":"rerddap 1.0.1","title":"rerddap 1.0.1","text":"CRAN release: 2022-12-11 Changed default cacheing behavior ‘cache_setup()’","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-100","dir":"Changelog","previous_headings":"","what":"rerddap 1.0.0","title":"rerddap 1.0.0","text":"CRAN release: 2022-10-03 griddap dataframe now uses coordinate names returned ‘rerddap::info()’ grids can now “melted” dataframe, just lat-lon grids fixed bugs accessing datasets lat-lon grid vignette now included package.","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-080","dir":"Changelog","previous_headings":"","what":"rerddap 0.8.0","title":"rerddap 0.8.0","text":"CRAN release: 2021-11-19 Added global search function fixed bug dataset decreasing coordinate latitude longitude","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-076","dir":"Changelog","previous_headings":"","what":"rerddap 0.7.6","title":"rerddap 0.7.6","text":"CRAN release: 2021-08-18","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-7-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.7.6","text":"fixed bug dealing trailing slashes URLs","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-074","dir":"Changelog","previous_headings":"","what":"rerddap 0.7.4","title":"rerddap 0.7.4","text":"CRAN release: 2021-03-05","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-7-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.7.4","text":"fix broken test","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-070","dir":"Changelog","previous_headings":"","what":"rerddap 0.7.0","title":"rerddap 0.7.0","text":"CRAN release: 2020-11-03","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-7-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.7.0","text":"vignettes package documentation site now (#87) server() (fetch known ERDDAP server URLs) now uses list maintained irishmarineinstitute/awesome-erddap GitHub (#86) better error handling griddap(): dimension arguments passed, error saying (http requests made); addition, dataset passed griddap(), output info() also passed, can check dataset griddap data , fail saying (#91) griddap() tabledap(): info() output passed two funcitons, now use url within info output, use message telling user ; now don’t set url pass info output (#92)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-065","dir":"Changelog","previous_headings":"","what":"rerddap 0.6.5","title":"rerddap 0.6.5","text":"CRAN release: 2019-07-20","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"bug-fixes-0-6-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rerddap 0.6.5","text":"fix convert_units test failing remote service changed response","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-064","dir":"Changelog","previous_headings":"","what":"rerddap 0.6.4","title":"rerddap 0.6.4","text":"CRAN release: 2019-07-01","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"bug-fixes-0-6-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rerddap 0.6.4","text":"fix internal fxn err_handle() handling http errors - ERDDAP servers changed weird JSON-ish type format (#85)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-060","dir":"Changelog","previous_headings":"","what":"rerddap 0.6.0","title":"rerddap 0.6.0","text":"CRAN release: 2019-05-08","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-6-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.6.0","text":"change tibble::as_data_frame/tibble::data_frame tibble::as_tibble (#79) info() gains new element output list, base_url, base url ERDDAP server consideration (#80) improved docs griddap() respect ’s returned function (#81) fix test fixtures use preserve exact bytes cran checks debian clang devel don’t fail (#83) add .github files: contributing, issue template, pull request template","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rerddap 0.6.0","text":"fix lat/lon parsing within griddap() account cases min max reversed order (#78) fix griddap() parse additioanl dimensions returned; previously returning time, lat, lon, plus one (#82) thanks @afredstonhermann","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-050","dir":"Changelog","previous_headings":"","what":"rerddap 0.5.0","title":"rerddap 0.5.0","text":"CRAN release: 2019-02-01","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.5.0","text":"added new Caching section package level manual file (?rerddap) caching (#52) use markdown docs package (#75) replace httr crul (#54) cache tests HTTP requests using vcr (#76) add test read parameter griddap() (#47) use default url via eurl(); used default main functions; set default url env vars, see ?eurl (#41) improve handling reporting back user ERDDAP server errors (#70) (#73) change griddap(): nc format gridded datasets latitude longitude “melt” data.frame easy downstream consumption. nc format gridded datasets latitude longitude components, read data, throw warning saying . can readin nc file file path (#74) griddap() support cases wihch lat/lon runs north south south north (#68)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rerddap 0.5.0","text":"memory() usage griddap() wasn’t working. fixed now (#77)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-042","dir":"Changelog","previous_headings":"","what":"rerddap 0.4.2","title":"rerddap 0.4.2","text":"CRAN release: 2017-05-12","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"new-features-0-4-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rerddap 0.4.2","text":"Now using hoardr manage caching paths (#60). Also now asking users want cache files, either rappdirs user cache dir temp directory. Now tests examples use temp dirs. Related , new functions cache_info() get cache path number cached files, cache_setup() set cache path. Related , cache_details(), cache_list(), cache_delete() lose cache_path parameter - now cache path set package wide use cache path, need set fxn call.","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-4-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.4.2","text":"Fixes number griddap() tabledap() examples use datasets still exist (previous examples used datasets gone)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-040","dir":"Changelog","previous_headings":"","what":"rerddap 0.4.0","title":"rerddap 0.4.0","text":"CRAN release: 2017-04-25","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rerddap 0.4.0","text":"New vignette added goes much depth original vignette (#51) thx @rmendels info() function gains new attribute url base url ERDDAP server used (#42) Replaced usage internal compact data.frame code use tibble package (#45)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.4.0","text":"Added another ERDDAP server servers() function (#49) Changed base URLs default ERDDAP server http https (#50) Added note docs griddap() tabledap() best deal 500 server errors (#48) Replaced dplyr::rbind_all uses dplyr::bind_rows (#46)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-034","dir":"Changelog","previous_headings":"","what":"rerddap 0.3.4","title":"rerddap 0.3.4","text":"CRAN release: 2016-01-14","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-3-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.3.4","text":"Removed use ncdf package, taken CRAN. Using ncdf4 now NetCDF file manipulation. (#35) Failing better now custom error catching (#31) Added many internal checks parameter inputs, warning stopping necessary - ERDDAP servers silently drop informative messages (#32)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"bug-fixes-0-3-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rerddap 0.3.4","text":"Using now file.info()$size instead file.size() backwards compatible R versions < 3.2","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-030","dir":"Changelog","previous_headings":"","what":"rerddap 0.3.0","title":"rerddap 0.3.0","text":"CRAN release: 2015-10-10","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rerddap 0.3.0","text":"Cache functions accept outputs griddap() tabledap() user can easily see cache details delete file cache without manually get file name. (#30)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.3.0","text":"package dependencies now use importFrom import functions need instead global namespaces.","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rerddap 0.3.0","text":"Fixed bug parsing data netcdf files, affected griddap() function (#28)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-020","dir":"Changelog","previous_headings":"","what":"rerddap 0.2.0","title":"rerddap 0.2.0","text":"CRAN release: 2015-07-01","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rerddap 0.2.0","text":"Added suite functions manage local cached files (#17)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rerddap 0.2.0","text":"Added new ERDDAP server list servers servers() function (#21)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rerddap 0.2.0","text":"Fixed cases across number functions empty list passed query parmaeter httr::GET() caused error (#23) Fixed retrieval path file written disk httr::write_disk() (#24) last value accepted ERDDAP servers, internal functions weren’t checking correctly, fixed now. (#25) .info() wasn’t passing url parameter info() function. fixed now. (#26)","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"rerddap-010","dir":"Changelog","previous_headings":"","what":"rerddap 0.1.0","title":"rerddap 0.1.0","text":"CRAN release: 2015-05-11","code":""},{"path":"https://docs.ropensci.org/rerddap/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"rerddap 0.1.0","text":"released CRAN","code":""}]
